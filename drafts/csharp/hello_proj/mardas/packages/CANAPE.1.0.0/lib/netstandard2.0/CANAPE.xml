<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CANAPE</name>
    </assembly>
    <members>
        <member name="T:CANAPE.DataAdapters.BaseDataAdapter">
            <summary>
            Base class for DataAdapters
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.BaseDataAdapter.Read">
            <summary>
            Read a data frame from the underlying provider
            </summary>
            <returns>The data frame, null on end of stream</returns>
        </member>
        <member name="M:CANAPE.DataAdapters.BaseDataAdapter.Write(CANAPE.DataFrames.DataFrame)">
            <summary>
            Write a data frame to the underlying provider
            </summary>
            <param name="frame">The frame to write</param>
        </member>
        <member name="P:CANAPE.DataAdapters.BaseDataAdapter.Description">
            <summary>
            Get the description
            </summary>
        </member>
        <member name="P:CANAPE.DataAdapters.BaseDataAdapter.ReadTimeout">
            <summary>
            Get or set the read timeout
            </summary>
            <exception cref="T:System.InvalidOperationException">Base version always throws InvalidOperationException</exception>
        </member>
        <member name="P:CANAPE.DataAdapters.BaseDataAdapter.CanTimeout">
            <summary>
            Indicates if the data adapter can timeout
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.BaseDataAdapter.ToString">
            <summary>
            Overriden ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:CANAPE.DataAdapters.BaseDataAdapter.Reconnect">
            <summary>
            Reconnect the data adapter
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown</exception>
        </member>
        <member name="M:CANAPE.DataAdapters.BaseDataAdapter.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.BaseDataAdapter.OnDispose(System.Boolean)">
            <summary>
            Dispose method, called on Close, when finalizing and on Dispose
            </summary>
            <param name="disposing">True if called from Dispose or Close, false if called from finalizer</param>
        </member>
        <member name="M:CANAPE.DataAdapters.BaseDataAdapter.Dispose">
            <summary>
            IDispose method
            </summary>
        </member>
        <member name="T:CANAPE.DataAdapters.CoupledDataAdapter">
            <summary>
            A data adapter which has two IDataAdapter interfaces, one each side of a queue
            Can be used to traverse data between graphs
            </summary>
        </member>
        <member name="P:CANAPE.DataAdapters.CoupledDataAdapter.Coupling">
            <summary>
            The coupled adapter
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.CoupledDataAdapter.#ctor(System.Threading.CancellationToken)">
            <summary>
            Constructor
            </summary>
            <param name="token">A cancellation token to use</param>
        </member>
        <member name="M:CANAPE.DataAdapters.CoupledDataAdapter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:CANAPE.DataAdapters.DataAdapterToStream">
            <summary>
            Class to implement a .NET stream based on a data adapter    
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.DataAdapterToStream.#ctor(CANAPE.DataAdapters.IDataAdapter)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:CANAPE.DataAdapters.DataAdapterToStream.Description">
            <summary>
            Get the description
            </summary>
        </member>
        <member name="P:CANAPE.DataAdapters.DataAdapterToStream.CanRead">
            <summary>
            Whether the stream can be read (always true)
            </summary>
        </member>
        <member name="P:CANAPE.DataAdapters.DataAdapterToStream.CanSeek">
            <summary>
            Whether the stream can be seeked (always false)
            </summary>
        </member>
        <member name="P:CANAPE.DataAdapters.DataAdapterToStream.CanWrite">
            <summary>
            Whether the stream can be written (always false)
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.DataAdapterToStream.Flush">
            <summary>
            Flush the stream (does nothing)
            </summary>
        </member>
        <member name="P:CANAPE.DataAdapters.DataAdapterToStream.Length">
            <summary>
            Get length of stream, always throws NotSupportedException
            </summary>
        </member>
        <member name="P:CANAPE.DataAdapters.DataAdapterToStream.Position">
            <summary>
            Get or set position in stream, always throws NotSupportedException
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.DataAdapterToStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read data from pipe
            </summary>
            <param name="buffer">The array to put the data into</param>
            <param name="offset">The offset into the array</param>
            <param name="count">The number of bytes to read</param>
            <returns>The length successfully read, 0 on end of stream</returns>
        </member>
        <member name="M:CANAPE.DataAdapters.DataAdapterToStream.ReadByte">
            <summary>
            Read a byte
            </summary>
            <returns>The byte, -1 on end of stream</returns>
        </member>
        <member name="M:CANAPE.DataAdapters.DataAdapterToStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek (always throws NotSupportedException)
            </summary>
            <param name="offset">Offset</param>
            <param name="origin">Origin</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns>N/A</returns>
        </member>
        <member name="M:CANAPE.DataAdapters.DataAdapterToStream.SetLength(System.Int64)">
            <summary>
            Set the length of the stream (always throws NotSupportedException)
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:CANAPE.DataAdapters.DataAdapterToStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream 
            </summary>
            <param name="buffer">Buffer</param>
            <param name="offset">Offset</param>
            <param name="count">Count</param>
        </member>
        <member name="P:CANAPE.DataAdapters.DataAdapterToStream.ReadTimeout">
            <summary>
            Get or set the read timeout
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.DataAdapterToStream.Dispose(System.Boolean)">
            <summary>
            Disposing method
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:CANAPE.DataAdapters.DelegateDataAdapter">
            <summary>
            A simple data adapter which allows you to specify its actions through delegates
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.DelegateDataAdapter.#ctor(System.Action,System.Action{CANAPE.DataFrames.DataFrame},System.Func{CANAPE.DataFrames.DataFrame})">
            <summary>
            Constructor
            </summary>
            <param name="onClose">Close delegate</param>
            <param name="onRead">Read delegate</param>
            <param name="onWrite">Write delegate</param>
        </member>
        <member name="M:CANAPE.DataAdapters.DelegateDataAdapter.Read">
            <summary>
            Read method
            </summary>
            <returns>Returns read frame.</returns>
        </member>
        <member name="M:CANAPE.DataAdapters.DelegateDataAdapter.Write(CANAPE.DataFrames.DataFrame)">
            <summary>
            Write method
            </summary>
            <param name="frame">The frame to write</param>
        </member>
        <member name="P:CANAPE.DataAdapters.DelegateDataAdapter.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:CANAPE.DataAdapters.DelegateDataAdapter.ReadTimeout">
            <summary>
            Read timeout
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.DelegateDataAdapter.Reconnect">
            <summary>
            Reconnect the data adapter
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown</exception>
        </member>
        <member name="P:CANAPE.DataAdapters.DelegateDataAdapter.CanTimeout">
            <summary>
            Can timeout
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.DelegateDataAdapter.Dispose">
            <summary>
            Dispose method, does nothing
            </summary>
        </member>
        <member name="T:CANAPE.DataAdapters.EnumerableDataAdapter">
            <summary>
            A data adapter which reads frames from an IEnumerable
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.EnumerableDataAdapter.GetFrames">
            <summary>
            Overridable method to get frames
            </summary>
            <returns>Return an IEnumerable for the frames</returns>
        </member>
        <member name="M:CANAPE.DataAdapters.EnumerableDataAdapter.Read">
            <summary>
            Read the next frame
            </summary>
            <returns>The frame, null on EOS</returns>
        </member>
        <member name="T:CANAPE.DataAdapters.IDataAdapter">
            <summary>
            Interface for a basic data adapter
            </summary>
            <remarks>
            This is the primitive for sourcing and sinking DataFrame objects, users of this interface should be completely
            agnostic to where that data comes from or goes to.
            </remarks>
        </member>
        <member name="M:CANAPE.DataAdapters.IDataAdapter.Read">
            <summary>
            Read a frame of data from the underlying provider
            </summary>
            <returns>The data frame, null on end of stream</returns>
        </member>
        <member name="M:CANAPE.DataAdapters.IDataAdapter.Write(CANAPE.DataFrames.DataFrame)">
            <summary>
            Write a frame of data to the underlying provider
            </summary>
            <param name="frame">The frame to write</param>
        </member>
        <member name="P:CANAPE.DataAdapters.IDataAdapter.Description">
            <summary>
            Get a textual description of this adapter
            </summary>
        </member>
        <member name="P:CANAPE.DataAdapters.IDataAdapter.ReadTimeout">
            <summary>
            Get or set the read timeout for this adapter (if unsupported it will throw InvalidOperationException)
            </summary>
        </member>
        <member name="P:CANAPE.DataAdapters.IDataAdapter.CanTimeout">
            <summary>
            Gets whether this adapter can timeout
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.IDataAdapter.Reconnect">
            <summary>
            Reconnect the data adapter
            </summary>
        </member>
        <member name="T:CANAPE.DataAdapters.NullDataAdapter">
            <summary>
            A data adapter which is equivalent of /dev/null
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.NullDataAdapter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.NullDataAdapter.Read">
            <summary>
            Blocks until close then returns null
            </summary>
            <returns>Always null</returns>
        </member>
        <member name="M:CANAPE.DataAdapters.NullDataAdapter.Write(CANAPE.DataFrames.DataFrame)">
            <summary>
            Sinks data until receives null then closes adapter
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:CANAPE.DataAdapters.NullDataAdapter.OnDispose(System.Boolean)">
            <summary>
            OnDispose method
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:CANAPE.DataAdapters.PrefixedDataAdapter">
            <summary>
            Implement a data adapter which wraps another but prefixes the first read with a block of data
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.PrefixedDataAdapter.#ctor(CANAPE.DataAdapters.IDataAdapter,System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="adapter">The data adapter to wrap</param>
            <param name="data">The prefix data to send</param>
        </member>
        <member name="M:CANAPE.DataAdapters.PrefixedDataAdapter.Read">
            <summary>
            Read a data frame
            </summary>
            <returns>The data frame, null on end of file</returns>
        </member>
        <member name="M:CANAPE.DataAdapters.PrefixedDataAdapter.Write(CANAPE.DataFrames.DataFrame)">
            <summary>
            Write to the data adapter
            </summary>
            <param name="frame">The frame to write</param>
        </member>
        <member name="P:CANAPE.DataAdapters.PrefixedDataAdapter.Description">
            <summary>
            Get a string description
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.PrefixedDataAdapter.Dispose">
            <summary>
            Dispose of the data adapter
            </summary>
        </member>
        <member name="P:CANAPE.DataAdapters.PrefixedDataAdapter.ReadTimeout">
            <summary>
            Get or set the read timeout
            </summary>
        </member>
        <member name="P:CANAPE.DataAdapters.PrefixedDataAdapter.CanTimeout">
            <summary>
            Indicates if data adapter can timeout
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.PrefixedDataAdapter.Reconnect">
            <summary>
            Reconnect the data adapter
            </summary>
        </member>
        <member name="T:CANAPE.DataAdapters.QueuedDataAdapter">
            <summary>
            A data adapter which acts like a queue, calling code can queue up a frame which will 
            travese a network and then dequeue data as it returns
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.QueuedDataAdapter.#ctor(System.Threading.CancellationToken)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.QueuedDataAdapter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.QueuedDataAdapter.Read">
            <summary>
            Read a frame from the output queue
            </summary>
            <returns>The frame, null on end of stream</returns>
        </member>
        <member name="M:CANAPE.DataAdapters.QueuedDataAdapter.Write(CANAPE.DataFrames.DataFrame)">
            <summary>
            Writes a frame to the input queue
            </summary>
            <param name="data">The frame, null on end of stream</param>
        </member>
        <member name="M:CANAPE.DataAdapters.QueuedDataAdapter.OnDispose(System.Boolean)">
            <summary>
            Dispose method, only closes input queue so you can no longer write to it
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:CANAPE.DataAdapters.QueuedDataAdapter.Enqueue(CANAPE.DataFrames.DataFrame)">
            <summary>
            Enqueue a frame on the outbound queue
            </summary>
            <param name="frame">The frame</param>
        </member>
        <member name="M:CANAPE.DataAdapters.QueuedDataAdapter.StopEnqueue">
            <summary>
            Close the write queue down, this will cause the Read() method to return null when no more data
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.QueuedDataAdapter.Dequeue">
            <summary>
            Dequeue a frame from the input queue
            </summary>
            <returns>The frame, null on end of stream</returns>
        </member>
        <member name="M:CANAPE.DataAdapters.QueuedDataAdapter.Dequeue(System.Int32)">
            <summary>
            Dequeue a frame from the input queue with timeout
            </summary>
            <param name="readTimeout">Timeout in milliseconds</param>
            <returns>The frame, null on end of stream or timeout</returns>
        </member>
        <member name="P:CANAPE.DataAdapters.QueuedDataAdapter.ReadTimeout">
            <summary>
            Specify read timeout
            </summary>
        </member>
        <member name="T:CANAPE.DataAdapters.StreamDataAdapter">
            <summary>
            Data adapter for a stream object
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.StreamDataAdapter.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="stream">The stream to read and write to</param>
        </member>
        <member name="M:CANAPE.DataAdapters.StreamDataAdapter.#ctor(System.IO.Stream,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="stream">The stream to wrap the data adapter around</param>
            <param name="description">A textual description to identify the adapter</param>
        </member>
        <member name="M:CANAPE.DataAdapters.StreamDataAdapter.Read">
            <summary>
            Perform a read
            </summary>
            <returns>The data frame</returns>
        </member>
        <member name="M:CANAPE.DataAdapters.StreamDataAdapter.Write(CANAPE.DataFrames.DataFrame)">
            <summary>
            Perform write
            </summary>
            <param name="frame"></param>
        </member>
        <member name="P:CANAPE.DataAdapters.StreamDataAdapter.ReadTimeout">
            <summary>
            Get or set the read timeout
            </summary>
        </member>
        <member name="M:CANAPE.DataAdapters.StreamDataAdapter.OnDispose(System.Boolean)">
            <summary>
            Perform close
            </summary>
        </member>
        <member name="T:CANAPE.DataFrames.BasicDataFrameEqualityComparer">
            <summary>
            Equality comparer to just compare frames as bytes
            </summary>
        </member>
        <member name="M:CANAPE.DataFrames.BasicDataFrameEqualityComparer.Equals(CANAPE.DataFrames.DataFrame,CANAPE.DataFrames.DataFrame)">
            <summary>
            Whether the two frames are equal
            </summary>
            <param name="x">Left frame</param>
            <param name="y">Right frame</param>
            <returns></returns>
        </member>
        <member name="M:CANAPE.DataFrames.BasicDataFrameEqualityComparer.GetHashCode(CANAPE.DataFrames.DataFrame)">
            <summary>
            Get hash code of frame
            </summary>
            <param name="obj">The frame</param>
            <returns>The hash code</returns>
        </member>
        <member name="T:CANAPE.DataFrames.ByteArrayDataFrame">
            <summary>
            Byte array data frame.
            </summary>
        </member>
        <member name="M:CANAPE.DataFrames.ByteArrayDataFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CANAPE.DataFrames.ByteArrayDataFrame"/> class.
            </summary>
        </member>
        <member name="M:CANAPE.DataFrames.ByteArrayDataFrame.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:CANAPE.DataFrames.ByteArrayDataFrame"/> class.
            </summary>
            <param name="data">Data for frame</param>
        </member>
        <member name="M:CANAPE.DataFrames.ByteArrayDataFrame.GetInternalValue">
            <summary>
            Gets the internal value.
            </summary>
            <returns>The internal value.</returns>
        </member>
        <member name="M:CANAPE.DataFrames.ByteArrayDataFrame.ToArray">
            <summary>
            Converts to a byte array
            </summary>
            <returns>The byte array.</returns>
        </member>
        <member name="M:CANAPE.DataFrames.ByteArrayDataFrame.OnClone">
            <summary>
            Called on clone.
            </summary>
        </member>
        <member name="T:CANAPE.DataFrames.ComplexDataFrame`1">
            <summary>
            Complex data frame class.
            </summary>
        </member>
        <member name="M:CANAPE.DataFrames.ComplexDataFrame`1.GetInternalValue">
            <summary>
            Gets the internal value.
            </summary>
            <returns>The internal value.</returns>
        </member>
        <member name="M:CANAPE.DataFrames.ComplexDataFrame`1.OnClone">
            <summary>
            Method called on clone
            </summary>
        </member>
        <member name="M:CANAPE.DataFrames.ComplexDataFrame`1.ToArray">
            <summary>
            Convert the frame to a byte array
            </summary>
        </member>
        <member name="M:CANAPE.DataFrames.ComplexDataFrame`1.#ctor(`0)">
            <summary>
            Constructor, creates a basic frame with a known root
            </summary>
        </member>
        <member name="M:CANAPE.DataFrames.ComplexDataFrame`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:CANAPE.DataFrames.ComplexDataFrame`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:CANAPE.DataFrames.ComplexDataFrame`1"/>.</returns>
        </member>
        <member name="T:CANAPE.DataFrames.DataFrame">
            <summary>
            A DataFrame object
            </summary>
        </member>
        <member name="M:CANAPE.DataFrames.DataFrame.OnClone">
            <summary>
            Methods called after clone.
            </summary>
        </member>
        <member name="M:CANAPE.DataFrames.DataFrame.Clone">
            <summary>
            Clone the frame
            </summary>
            <returns>The cloned frame</returns>
        </member>
        <member name="M:CANAPE.DataFrames.DataFrame.GetInternalValue">
            <summary>
            Gets the internal value.
            </summary>
            <returns>The internal value.</returns>
        </member>
        <member name="M:CANAPE.DataFrames.DataFrame.GetValue">
            <summary>
            Gets the value as a dynamic object.
            </summary>
            <returns>The value as a dynamic object</returns>
        </member>
        <member name="M:CANAPE.DataFrames.DataFrame.GetValue``1">
            <summary>
            Gets the value.
            </summary>
            <returns>The value.</returns>
            <typeparam name="T">The type of the value you want.</typeparam>
            <exception cref="T:System.InvalidCastException">Thrown in can't cast to this type</exception>
        </member>
        <member name="M:CANAPE.DataFrames.DataFrame.GetValueNoThrow``1">
            <summary>
            Gets the value but doesn't throw if not valid conversion. Instead returns
            the default value for the type.
            </summary>
            <returns>The value.</returns>
            <typeparam name="T">The type of the value you want.</typeparam>
        </member>
        <member name="M:CANAPE.DataFrames.DataFrame.ToArray">
            <summary>
            Convert the frame to a byte array
            </summary>
        </member>
        <member name="M:CANAPE.DataFrames.DataFrame.ToDataString">
            <summary>
            Convert the frame to a data string
            </summary>
            <returns>The data string</returns>
        </member>
        <member name="P:CANAPE.DataFrames.DataFrame.Hash">
            <summary>
            MD5 hash of the frame
            </summary>
        </member>
        <member name="P:CANAPE.DataFrames.DataFrame.Length">
            <summary>
            Cached length of the frame
            </summary>
        </member>
        <member name="M:CANAPE.DataFrames.DataFrame.ToString">
            <summary>
            Converts the node to a display string of sorts
            </summary>
            <returns></returns>
        </member>
        <member name="T:CANAPE.DataFrames.DataFrameExtensions">
            <summary>
            Class to add some extension methods to data adapters
            </summary>
        </member>
        <member name="M:CANAPE.DataFrames.DataFrameExtensions.ReadFrames(CANAPE.DataAdapters.IDataAdapter)">
            <summary>
            Convert frames to an enumerator
            </summary>
            <param name="adapter">The data adapgter</param>
            <returns>An enumerator of frames</returns>
        </member>
        <member name="M:CANAPE.DataFrames.DataFrameExtensions.ToDataFrame(System.Byte[])">
            <summary>
            Convert byte array to a data frame.
            </summary>
            <returns>The data frame.</returns>
            <param name="data">The byte array to convert</param>
        </member>
        <member name="M:CANAPE.DataFrames.DataFrameExtensions.ToDataFrame(System.String)">
            <summary>
            Convert string a binary string data frame.
            </summary>
            <returns>The data frame.</returns>
            <param name="data">The string to convert</param>
        </member>
        <member name="M:CANAPE.DataFrames.DataFrameExtensions.ToDataFrame(System.String,System.Text.Encoding)">
            <summary>
            Convert string a binary string data frame.
            </summary>
            <returns>The data frame.</returns>
            <param name="data">The string to convert</param>
            <param name="encoding">The string encoding</param>
        </member>
        <member name="M:CANAPE.DataFrames.DataFrameExtensions.ToDataFrame``1(``0)">
            <summary>
            Convert a data value to a frame.
            </summary>
            <returns>The data frame.</returns>
            <param name="value">The value to convert.</param>
        </member>
        <member name="T:CANAPE.DataFrames.IDataValue`1">
            <summary>
            An interface which species a method to serialize a value to and from a byte stream
            </summary>
        </member>
        <member name="M:CANAPE.DataFrames.IDataValue`1.ToWriter(CANAPE.Utils.DataWriter)">
            <summary>
            Write the object to a stream
            </summary>
            <param name="writer">The writer to write the stream to</param>
        </member>
        <member name="T:CANAPE.DataFrames.StringDataFrame">
            <summary>
            String data frame.
            </summary>
        </member>
        <member name="M:CANAPE.DataFrames.StringDataFrame.GetInternalValue">
            <summary>
            Gets the internal value.
            </summary>
            <returns>The internal value.</returns>
        </member>
        <member name="M:CANAPE.DataFrames.StringDataFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CANAPE.DataFrames.StringDataFrame"/> class.
            </summary>
        </member>
        <member name="M:CANAPE.DataFrames.StringDataFrame.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CANAPE.DataFrames.StringDataFrame"/> class.
            </summary>
            <param name="value">The string value for Binary Encoding.</param>
        </member>
        <member name="M:CANAPE.DataFrames.StringDataFrame.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:CANAPE.DataFrames.StringDataFrame"/> class.
            </summary>
            <param name="data">The string value.</param>
            <param name="encoding">Text encoding.</param>
        </member>
        <member name="M:CANAPE.DataFrames.StringDataFrame.ToDataString">
            <summary>
            Convert to a data string.
            </summary>
            <returns>The data string.</returns>
        </member>
        <member name="M:CANAPE.DataFrames.StringDataFrame.ToArray">
            <summary>
            Converts to a byte array
            </summary>
            <returns>The byte array.</returns>
        </member>
        <member name="T:CANAPE.NodeFactories.BaseNodeFactory">
            <summary>
            Base class for pipe node factories
            </summary>    
        </member>
        <member name="P:CANAPE.NodeFactories.BaseNodeFactory.Id">
            <summary>
            Id of the node
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.BaseNodeFactory.Properties">
            <summary>
            Properties of the node
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.BaseNodeFactory.Enabled">
            <summary>
            Whether the node is enable
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.BaseNodeFactory.Label">
            <summary>
            The label of the node
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.BaseNodeFactory.Hidden">
            <summary>
            Whether the node should be hidden
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.BaseNodeFactory.LogInput">
            <summary>
            Log all input traffic to this node
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.BaseNodeFactory.LogOutput">
            <summary>
            Log all output traffic from this node
            </summary>
        </member>
        <member name="M:CANAPE.NodeFactories.BaseNodeFactory.#ctor(System.String,System.Guid)">
            <summary>
            Another internal constructor
            </summary>
            <param name="label"></param>
            <param name="guid"></param>
        </member>
        <member name="M:CANAPE.NodeFactories.BaseNodeFactory.ToString">
            <summary>
            Simple convert to a string
            </summary>
            <returns>The label of the node</returns>
        </member>
        <member name="M:CANAPE.NodeFactories.BaseNodeFactory.OnCreate(CANAPE.Utils.Logger,CANAPE.Nodes.NetGraph,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Abstract method to be overridden by derived classes
            </summary>
            <returns></returns>
        </member>
        <member name="M:CANAPE.NodeFactories.BaseNodeFactory.Create(CANAPE.Utils.Logger,CANAPE.Nodes.NetGraph,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a new pipeline node based on this factory
            </summary>
            <param name="graph">The netgraph associated with this node</param>
            <param name="logger">The logger associated with the graph</param>
            <param name="stateDictionary">A dictionary which can be used to store construction state</param>
            <returns>The new node</returns>
        </member>
        <member name="T:CANAPE.NodeFactories.ClientEndpointFactory">
            <summary>
            Factory for client node
            </summary>
        </member>
        <member name="M:CANAPE.NodeFactories.ClientEndpointFactory.#ctor(System.String,System.Guid)">
            <summary>
            
            </summary>
            <param name="label"></param>
            <param name="guid"></param>
        </member>
        <member name="T:CANAPE.NodeFactories.DelayNodeFactory">
            <summary>
            A factory for a delay node
            </summary>    
        </member>
        <member name="M:CANAPE.NodeFactories.DelayNodeFactory.#ctor(System.String,System.Guid)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.DelayNodeFactory.PacketDelayMs">
            <summary>
            Specify a packet delay in milli-seconds
            </summary>
        </member>
        <member name="M:CANAPE.NodeFactories.DelayNodeFactory.OnCreate(CANAPE.Utils.Logger,CANAPE.Nodes.NetGraph,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Called to create an instance
            </summary>
            <returns>The new instance</returns>
        </member>
        <member name="T:CANAPE.NodeFactories.DirectNodeFactory">
            <summary>
            A factory for a direct node
            </summary>    
        </member>
        <member name="M:CANAPE.NodeFactories.DirectNodeFactory.#ctor(System.String,System.Guid)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CANAPE.NodeFactories.DirectNodeFactory.OnCreate(CANAPE.Utils.Logger,CANAPE.Nodes.NetGraph,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Called to create an instance
            </summary>
            <returns>The new instance</returns>
        </member>
        <member name="T:CANAPE.NodeFactories.EditPacketNodeFactory">
            <summary>
            Factory to create an edit packet node
            </summary>    
        </member>
        <member name="M:CANAPE.NodeFactories.EditPacketNodeFactory.#ctor(System.String,System.Guid,CANAPE.Utils.ColorValue,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="label"></param>
            <param name="guid"></param>
            <param name="color">The colour to show in an edit window</param>
            <param name="tag">The textual tag to show in an edit window</param>
        </member>
        <member name="M:CANAPE.NodeFactories.EditPacketNodeFactory.OnCreate(CANAPE.Utils.Logger,CANAPE.Nodes.NetGraph,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a node instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:CANAPE.NodeFactories.LogPacketNodeFactory">
            <summary>
            Factory to create a log packet node
            </summary>    
        </member>
        <member name="M:CANAPE.NodeFactories.LogPacketNodeFactory.#ctor(System.String,System.Guid,CANAPE.Utils.ColorValue,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="label">The label of the node</param>
            <param name="guid">Unique ID of the node</param>
            <param name="color">The color of the log entry to use in a gui</param>
            <param name="convertToBytes">True indicates all packets are converted to bytes before being logged</param>
            <param name="tag">A textual tag to log</param>
        </member>
        <member name="P:CANAPE.NodeFactories.LogPacketNodeFactory.Color">
            <summary>
            The color of the log entry
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.LogPacketNodeFactory.Tag">
            <summary>
            A textual tag to log
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.LogPacketNodeFactory.ConvertToBytes">
            <summary>
            True indicates all packets are converted to bytes before being logged
            </summary>
        </member>
        <member name="M:CANAPE.NodeFactories.LogPacketNodeFactory.OnCreate(CANAPE.Utils.Logger,CANAPE.Nodes.NetGraph,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Method called when being created
            </summary>
            <returns>The new node</returns>
        </member>
        <member name="T:CANAPE.NodeFactories.NetGraphContainerNodeFactory">
            <summary>
            A factory which creates a netgraph container
            </summary>    
        </member>
        <member name="P:CANAPE.NodeFactories.NetGraphContainerNodeFactory.Direction">
            <summary>
            The direction that this node should bind to 
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.NetGraphContainerNodeFactory.Factory">
            <summary>
            The graph factory to contain in this node
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.NetGraphContainerNodeFactory.LinkedNode">
            <summary>
            A linked node factory (if applicable)
            </summary>
        </member>
        <member name="M:CANAPE.NodeFactories.NetGraphContainerNodeFactory.#ctor(System.String,System.Guid,CANAPE.NodeFactories.NetGraphFactory,CANAPE.Nodes.NetGraphContainerNode.GraphDirection)">
            <summary>
            Constructor
            </summary>
            <param name="guid"></param>
            <param name="label"></param>
            <param name="factory"></param>
            <param name="direction"></param>
        </member>
        <member name="M:CANAPE.NodeFactories.NetGraphContainerNodeFactory.OnCreate(CANAPE.Utils.Logger,CANAPE.Nodes.NetGraph,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            On Create method
            </summary>
            <param name="logger">The logger for use during creation</param>
            <param name="graph">The containing graph</param>
            <param name="stateDictionary">Current state dictionary</param>
            <returns></returns>
        </member>
        <member name="T:CANAPE.NodeFactories.NetGraphFactory">
            <summary>
            Factory object for a net graph
            </summary>    
        </member>
        <member name="T:CANAPE.NodeFactories.NetGraphFactory.GraphNodeEntry">
            <summary>
            Entry for a graphnode
            </summary>        
        </member>
        <member name="P:CANAPE.NodeFactories.NetGraphFactory.GraphNodeEntry.Id">
            <summary>
            Id of the node (calls down to the factory)
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.NetGraphFactory.GraphNodeEntry.Factory">
            <summary>
            The node factory object
            </summary>
        </member>
        <member name="M:CANAPE.NodeFactories.NetGraphFactory.GraphNodeEntry.ToString">
            <summary>
            Overridden form of ToString
            </summary>
            <returns>The label of the node</returns>
        </member>
        <member name="M:CANAPE.NodeFactories.NetGraphFactory.GraphNodeEntry.#ctor(CANAPE.NodeFactories.BaseNodeFactory)">
            <summary>
            Constructor
            </summary>
            <param name="factory">The node factory</param>
        </member>
        <member name="M:CANAPE.NodeFactories.NetGraphFactory.GraphNodeEntry.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CANAPE.NodeFactories.NetGraphFactory.GraphLineEntry">
            <summary>
            Entry for a graph line
            </summary>        
        </member>
        <member name="P:CANAPE.NodeFactories.NetGraphFactory.GraphLineEntry.SourceNode">
            <summary>
            The source node to which this attaches
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.NetGraphFactory.GraphLineEntry.DestNode">
            <summary>
            The destination node to which this attaches
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.NetGraphFactory.GraphLineEntry.BiDirection">
            <summary>
            Whether the line is bidirectional
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.NetGraphFactory.GraphLineEntry.PathName">
            <summary>
            The path name
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.NetGraphFactory.GraphLineEntry.WeakPath">
            <summary>
            Indicates this is a weak path, which means it doesn't contribute
            to the shutdown of a node
            </summary>
        </member>
        <member name="M:CANAPE.NodeFactories.NetGraphFactory.GraphLineEntry.#ctor(System.Guid,System.Guid,System.Boolean,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sourceNode">The source node</param>
            <param name="destNode">The desintation node</param>
            <param name="biDirection">Whether the path is bi-directional</param>
            <param name="pathName">The name of the path</param>
            <param name="weak">Indicates this is a weak path, which means it doesn't contribute to the shutdown of a node</param>
        </member>
        <member name="M:CANAPE.NodeFactories.NetGraphFactory.#ctor">
            <summary>
            Default constructor
            </summary>        
        </member>
        <member name="M:CANAPE.NodeFactories.NetGraphFactory.CreateFiltered(System.String,CANAPE.Utils.Logger,CANAPE.Nodes.NetGraph,CANAPE.Nodes.MetaDictionary,CANAPE.Nodes.MetaDictionary,System.Guid,CANAPE.Utils.PropertyBag,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a filtered netgraph based on a specific direction
            </summary>
            <param name="name">The name of the graph</param>
            <param name="logger">A logger object</param>
            <param name="parent">The parent graph, null if not available</param>
            <param name="globalMeta">Global meta dictionary</param>
            <param name="meta">Local meta dictionary</param>
            <param name="rootNode">The base node for traversing the graph</param>
            <param name="connectionProperties">Properties for connection</param>
            <param name="stateDictionary">Associated state dictionary</param>
            <returns>The constructed NetGraph</returns>
        </member>
        <member name="M:CANAPE.NodeFactories.NetGraphFactory.Create(CANAPE.Utils.Logger,CANAPE.Nodes.NetGraph,CANAPE.Nodes.MetaDictionary,CANAPE.Nodes.MetaDictionary,CANAPE.Utils.PropertyBag)">
            <summary>
            Build a NetGraph object from the nodes
            </summary>
            <param name="logger">A logger object</param>
            <param name="parent">The parent graph, null if not available</param>
            <param name="globalMeta">Global meta dictionary</param>
            <param name="meta">Local meta dictionary</param>
            <param name="connectionProperties">Properties for connection</param>
            <returns>The constructed NetGraph</returns>
        </member>
        <member name="M:CANAPE.NodeFactories.NetGraphFactory.Create(System.String,CANAPE.Utils.Logger,CANAPE.Nodes.NetGraph,CANAPE.Nodes.MetaDictionary,CANAPE.Nodes.MetaDictionary,CANAPE.Utils.PropertyBag)">
            <summary>
            Build a NetGraph object from the nodes
            </summary>
            <param name="name">The name of the graph</param>
            <param name="logger">A logger object</param>
            <param name="parent">The parent graph, null if not available</param>
            <param name="globalMeta">Global meta dictionary</param>
            <param name="meta">Local meta dictionary</param>
            <param name="connectionProperties">Properties for connection</param>
            <returns>The constructed NetGraph</returns>
        </member>
        <member name="M:CANAPE.NodeFactories.NetGraphFactory.GetEndpoints">
            <summary>
            Get a list of endpoint nodes (ones which are both sources and sinks)
            </summary>
            <returns>An array containing the endpoint nodes</returns>
        </member>
        <member name="M:CANAPE.NodeFactories.NetGraphFactory.GetNodes``1">
            <summary>
            Get nodes by their object type, or derived type
            </summary>
            <typeparam name="T">The factory type to extract</typeparam>
            <returns>The list of nodes, empty array of no nodes found</returns>
        </member>
        <member name="P:CANAPE.NodeFactories.NetGraphFactory.Uuid">
            <summary>
            The ID of this factory
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.NetGraphFactory.Name">
            <summary>
            The name of the netgraph
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.NetGraphFactory.Nodes">
            <summary>
            Get the list of nodes
            </summary>
        </member>
        <member name="P:CANAPE.NodeFactories.NetGraphFactory.Lines">
            <summary>
            Get the list of lines
            </summary>
        </member>
        <member name="M:CANAPE.NodeFactories.NetGraphFactory.UpdateGraph(CANAPE.NodeFactories.NetGraphFactory)">
            <summary>
            Update the factory from another
            </summary>
            <param name="factory">The factory to update from</param>
        </member>
        <member name="P:CANAPE.NodeFactories.NetGraphFactory.Properties">
            <summary>
            Get the graph properties
            </summary>
        </member>
        <member name="T:CANAPE.NodeFactories.NodeFactoryException">
            <summary>
            Exception throw when a node factory fails to create
            </summary>
        </member>
        <member name="M:CANAPE.NodeFactories.NodeFactoryException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message for the exception</param>
            <param name="innerException">An inner exception object</param>
        </member>
        <member name="M:CANAPE.NodeFactories.NodeFactoryException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message for the exception</param>
        </member>
        <member name="M:CANAPE.NodeFactories.NodeFactoryException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:CANAPE.NodeFactories.PipelineEndpointFactory">
            <summary>
            Factory for a pipeline endpoint node
            </summary>    
        </member>
        <member name="M:CANAPE.NodeFactories.PipelineEndpointFactory.#ctor(System.String,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="label"></param>
            <param name="guid"></param>
        </member>
        <member name="M:CANAPE.NodeFactories.PipelineEndpointFactory.OnCreate(CANAPE.Utils.Logger,CANAPE.Nodes.NetGraph,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create the node
            </summary>
            <returns></returns>
        </member>
        <member name="T:CANAPE.NodeFactories.ServerEndpointFactory">
            <summary>
            Node factory for a server endpoint
            </summary>
        </member>
        <member name="M:CANAPE.NodeFactories.ServerEndpointFactory.#ctor(System.String,System.Guid)">
            <summary>
            
            </summary>
            <param name="label"></param>
            <param name="guid"></param>
        </member>
        <member name="T:CANAPE.Nodes.BaseDataEndpoint`1">
            <summary>
            Base data endpoint.
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.BaseDataEndpoint`1.Run(CANAPE.DataAdapters.IDataAdapter,`0)">
            <summary>
            Run the specified adapter and config.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="config">Config.</param>
        </member>
        <member name="M:CANAPE.Nodes.BaseDataEndpoint`1.Run(CANAPE.DataAdapters.IDataAdapter)">
            <summary>
            Run the specified adapter.
            </summary>
            <param name="adapter">Adapter.</param>
        </member>
        <member name="P:CANAPE.Nodes.BaseDataEndpoint`1.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:CANAPE.Nodes.BaseDecoupledPipelineNode">
            <summary>
            A pipeline node which has its input and output decoupled by a thread
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.BaseDecoupledPipelineNode.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.BaseDecoupledPipelineNode.OnShutdown">
            <summary>
            Override function called when node is being shutdown
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.BaseDecoupledPipelineNode.Input(CANAPE.DataFrames.DataFrame)">
            <summary>
            Override function called when a packet is input
            </summary>
            <param name="frame">The input frame</param>
        </member>
        <member name="M:CANAPE.Nodes.BaseDecoupledPipelineNode.Dispose(System.Boolean)">
            <summary>
            Overidden dispose method
            </summary>
            <param name="disposing">True if should dispose of managed and unmanaged data</param>
        </member>
        <member name="T:CANAPE.Nodes.BasePersistDataEndpoint`1">
            <summary>
            Base persist data endpoint with a single config type
            </summary>
            <typeparam name="T">The type of configuration</typeparam>
        </member>
        <member name="T:CANAPE.Nodes.BasePersistDataEndpointRef`2">
            <summary>
            BaseDataEndpoint with persistence
            </summary>
            <typeparam name="T">The type of configuration</typeparam>
            <typeparam name="R">The reference type accessible from the Config property</typeparam>
        </member>
        <member name="M:CANAPE.Nodes.BasePersistDataEndpointRef`2.Run(CANAPE.DataAdapters.IDataAdapter)">
            <summary>
            Run the endpoint
            </summary>
            <param name="adapter">The data adapter</param>
        </member>
        <member name="P:CANAPE.Nodes.BasePersistDataEndpointRef`2.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.BasePersistDataEndpointRef`2.Meta">
            <summary>
            The meta dictionary
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.BasePersistDataEndpointRef`2.GlobalMeta">
            <summary>
            The global meta
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.BasePersistDataEndpointRef`2.Logger">
            <summary>
            Logger object
            </summary>
        </member>
        <member name="T:CANAPE.Nodes.BasePipelineNode">
            <summary>
            Base class for implementations of pipeline nodes
            </summary>
        </member>
        <member name="T:CANAPE.Nodes.BasePipelineNode.OutputNode">
            <summary>
            Class to hold a reference to an output node
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.BasePipelineNode.OutputNode.Node">
            <summary>
            The node object
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.BasePipelineNode.OutputNode.PathName">
            <summary>
            The path name to reach the node
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.BasePipelineNode.OutputNode.WeakPath">
            <summary>
            Indicates the path is weak and will not contribute to the shutdown of a node
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.OutputNode.#ctor(CANAPE.Nodes.BasePipelineNode,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="node"></param>
            <param name="pathName"></param>
            <param name="weak"></param>
        </member>
        <member name="F:CANAPE.Nodes.BasePipelineNode._noWriteOutput">
            <summary>
            A flag to indicate that the input mechanism should never write to the output
            if disabled, it should just discard it
            </summary>
        </member>
        <member name="F:CANAPE.Nodes.BasePipelineNode._output">
            <summary>
            The list of output nodes
            </summary>
        </member>
        <member name="F:CANAPE.Nodes.BasePipelineNode._shutdownInputs">
            <summary>
            The list of input nodes that are directly connected to this node
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.BasePipelineNode.Outputs">
            <summary>
            Gets a list of output nodes
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.Input(CANAPE.DataFrames.DataFrame)">
            <summary>
            Input method into pipeline node, specifying an input node
            </summary>        
            <param name="frame">The input frame, should never be null</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.CanHandleFrame(CANAPE.DataFrames.DataFrame)">
            <summary>
            Overridable method to determine if this node can handle the frame
            If not then the frame will just be passed along to the next node
            The default will match against a list of filters
            </summary>
            <param name="frame">The input frame (will never be null)</param>
            <returns>True if the OnInput method of this node should be called. False will automatically 
            hand off to the output</returns>
            <remarks>Overriding this function and not calling the base implementation will prevent 
            the generic filters from operating</remarks>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.OnShutdown">
            <summary>
            Overridable method called when the pipeline is being shutdown
            </summary>
            <returns>Indicates whether to send null to output</returns>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.OnInput(CANAPE.DataFrames.DataFrame)">
            <summary>
            Method to be implemented by derived type to handle receiving of input
            </summary>
            <param name="frame">The input frame</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.WriteOutput(CANAPE.DataFrames.DataFrame,CANAPE.Nodes.BasePipelineNode.OutputNode[])">
            <summary>
            Internal write function
            </summary>
            <param name="frame">The frame to write</param>
            <param name="nodes">The list of nodes to write to</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.WriteOutput(CANAPE.DataFrames.DataFrame)">
            <summary>
            Write frame to default nodes only
            </summary>
            <param name="frame">The frame to write</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.WriteOutput(System.String)">
            <summary>
            Write to the output a binary string
            </summary>
            <param name="s">The binary string to write</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.WriteOutput(System.Byte[])">
            <summary>
            Write to the output a byte array
            </summary>
            <param name="ba">The byte aray</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.WriteOutput(CANAPE.DataFrames.DataFrame,System.Boolean)">
            <summary>
            Write frame to output nodes, including named or not
            </summary>
            <param name="frame">The frame to write</param>
            <param name="includeNamed">Whether to include named outputs or just default</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.WriteOutput(CANAPE.DataFrames.DataFrame,System.String)">
            <summary>
            Write a frame to a specific named node in your output list
            </summary>
            <param name="frame">The frame to write</param>
            <param name="pathName">The path name to write to</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.WriteOutputExclude(CANAPE.DataFrames.DataFrame,System.String[])">
            <summary>
            Write a frame to the output nodes not specified in the list of paths
            </summary>
            <param name="frame">The frame to write</param>
            <param name="pathNames">The list of paths to NOT write to</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.HasOutput(System.String)">
            <summary>
            Determines if this node has at least one specific named output
            </summary>
            <param name="pathName">The path output name</param>
            <returns>True if it has the named output</returns>
        </member>
        <member name="P:CANAPE.Nodes.BasePipelineNode.Name">
            <summary>
            Get or set name of the node
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.BasePipelineNode.Graph">
            <summary>
            Get or set the associated net graph
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.BasePipelineNode.Hidden">
            <summary>
            Get or set whether the node should be visible
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.BasePipelineNode.Enabled">
            <summary>
            Get or set whether this node is active
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.BasePipelineNode.Uuid">
            <summary>
            Get or set the UUID
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.BasePipelineNode.LogInput">
            <summary>
            Indicates that the input of this node should be logged automatically
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.BasePipelineNode.LogOutput">
            <summary>
            Indicates that the output of this node should be logged automatically
            </summary>
        </member>
        <member name="E:CANAPE.Nodes.BasePipelineNode.NodeShutdown">
            <summary>
            An event which indicates that the node has been shutdown
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.AddOutput(CANAPE.Nodes.BasePipelineNode,System.String,System.Boolean)">
            <summary>
            Add an output to the current node
            </summary>        
            <param name="node">The node to add</param>
            <param name="pathName">The name of the path from this node to the other</param>
            <param name="weak">Indicates the output is weak</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.ToString">
            <summary>
            Overridden form of ToString
            </summary>
            <returns>The name of the node</returns>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.ShutdownOutputs">
            <summary>
            Shutdown all output nodes
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.Shutdown(CANAPE.Nodes.BasePipelineNode)">
            <summary>
            Shutdown this node
            </summary>
            <param name="inputNode">The node which is requesting shutdown, if null then force</param>
        </member>
        <member name="P:CANAPE.Nodes.BasePipelineNode.IsShutdown">
            <summary>
            Indicates the node is shutdown
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.BasePipelineNode.IsShuttingdown">
            <summary>
            Indicates the node is in the process of shutting down
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.Dispose(System.Boolean)">
            <summary>
            Overridable method called no dispose
            </summary>
            <param name="disposing">True if disposing, otherwise finalizing</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.Dispose">
            <summary>
            IDisposable.Dispose implementation
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.BasePipelineNode.Properties">
            <summary>
            Get the node properties
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.GetProperty(System.String)">
            <summary>
            Get a property of the node
            </summary>
            <param name="name">The name of the property</param>
            <returns>The value, null if it didn't exist</returns>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.SetProperty(System.String,System.Object)">
            <summary>
            Set a property of the node
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value, null to clear it</param>
        </member>
        <member name="P:CANAPE.Nodes.BasePipelineNode.InputPacketCount">
            <summary>
            Get the number of input packets this has handled
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.BasePipelineNode.OutputPacketCount">
            <summary>
            Get the number of output packets this has sent
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.BasePipelineNode.ByteCount">
            <summary>
            Get the number of bytes passed through this node
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.Log(CANAPE.Utils.Logger.LogEntryType,System.String,System.Object[])">
            <summary>
            Log an entry
            </summary>
            <param name="entryType">The type to log</param>
            <param name="format">Format string</param>
            <param name="args">The args</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.Log(CANAPE.Utils.Logger.LogEntryType,System.Object)">
            <summary>
            Log with an entry and only text
            </summary>
            <param name="entryType">The type to log</param>
            <param name="obj">The object to log</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.LogVerbose(System.String,System.Object[])">
            <summary>
            Log verbose entry
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.LogVerbose(System.Object)">
            <summary>
            Log verbose entry
            </summary>
            <param name="obj">The object to log</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.LogInfo(System.String,System.Object[])">
            <summary>
            Log info entry
            </summary>
            <param name="format">Format string</param>
            <param name="args">The args</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.LogInfo(System.Object)">
            <summary>
            Log info entry
            </summary>
            <param name="obj">The object to log</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.LogWarning(System.String,System.Object[])">
            <summary>
            Log warning entry
            </summary>
            <param name="format">Format string</param>
            <param name="args">The args</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.LogWarning(System.Object)">
            <summary>
            Log warning entry
            </summary>
            <param name="obj">The object to log</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.LogError(System.String,System.Object[])">
            <summary>
            Log error entry
            </summary>
            <param name="format">Format string</param>
            <param name="args">The args</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.LogError(System.Object)">
            <summary>
            Log error entry
            </summary>
            <param name="obj">The object to log</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.LogException(CANAPE.Utils.Logger.LogEntryType,System.Exception)">
            <summary>
            Log an exception
            </summary>
            <param name="type">Type of log entry</param>
            <param name="ex">The exception to log</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.LogException(System.Exception)">
            <summary>
            Log an exception
            </summary>
            <param name="ex">The exception to log</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.LogPacket(System.String,CANAPE.Utils.ColorValue,CANAPE.DataFrames.DataFrame,System.Boolean)">
            <summary>
            Wrapper method to log a packet
            </summary>
            <param name="tag">The logging tag</param>
            <param name="color">The logging colour</param>
            <param name="frame">The frame to log</param>
            <param name="logAsBytes">Indicates whether to log the packet as a byte array</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.LogPacket(System.String,System.Byte,System.Byte,System.Byte,CANAPE.DataFrames.DataFrame,System.Boolean)">
            <summary>
            Log a packet from the graph with separated colour values
            </summary>
            <param name="tag">A textual tag for the frame</param>
            <param name="r">Red value</param>
            <param name="g">Green value</param>
            <param name="b">Blue value</param>
            <param name="frame">The frame to log, note this will be cloned to preserve its value</param>
            <param name="logAsBytes">Indicates whether the packet should be logged as a byte array</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.EditPacket(CANAPE.DataFrames.DataFrame,CANAPE.Utils.ColorValue,System.String)">
            <summary>
            Edit a packet from the graph
            </summary>
            <param name="frame">The frame to edit</param>       
            <param name="color">The colour to show in an edit window (if applicable)</param>
            <param name="tag">The textual tag to show in an edit window (if applicable)</param>
            <returns>The returned frame, this may or may not be the same frame as sent</returns>        
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.EditPacket(CANAPE.DataFrames.DataFrame)">
            <summary>
            Edit a packet from the graph
            </summary>
            <param name="frame">The frame to edit</param>        
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.Break">
            <summary>
            Generate a breakpoint if debugger attached
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.BreakOneTime">
            <summary>
            Generate a break point one time if debugger attached
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.BreakOneTime(System.Boolean)">
            <summary>
            Generate a break point one time
            </summary>
            <param name="debuggerPresent">If true will check a debugger is present first</param>
        </member>
        <member name="M:CANAPE.Nodes.BasePipelineNode.Break(System.Boolean)">
            <summary>
            Generate a break point
            </summary>
            <param name="debuggerPresent">If true will check a debugger is present first</param>
        </member>
        <member name="T:CANAPE.Nodes.BaseStreamPipelineNode">
            <summary>
            Pipeline node which converts incoming data frames into a stream
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.BaseStreamPipelineNode.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.BaseStreamPipelineNode.OnRead(CANAPE.Utils.PipelineStream)">
            <summary>
            Function called by the thread
            </summary>
            <param name="stm">Reading stream</param>
        </member>
        <member name="M:CANAPE.Nodes.BaseStreamPipelineNode.OnShutdown">
            <summary>
            Override function called when node is being shutdown
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.BaseStreamPipelineNode.OnInput(CANAPE.DataFrames.DataFrame)">
            <summary>
            Override function called when a packet is input
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:CANAPE.Nodes.BaseStreamPipelineNode.Dispose(System.Boolean)">
            <summary>
            Overidden dispose method
            </summary>
            <param name="disposing">True if should dispose of managed and unmanaged data</param>
        </member>
        <member name="T:CANAPE.Nodes.DataEndpointAdapter">
            <summary>
            Data adapter to interface with a data endpoint object
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.DataEndpointAdapter.#ctor(CANAPE.Nodes.IDataEndpoint,CANAPE.Utils.Logger)">
            <summary>
            Constructor
            </summary>
            <param name="server">Data endpoint object</param>
            <param name="logger">Logger object</param>
        </member>
        <member name="M:CANAPE.Nodes.DataEndpointAdapter.Read">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:CANAPE.Nodes.DelayPipelineNode">
            <summary>
            A pipeline node with a built-in delay
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.DelayPipelineNode.PacketDelayMs">
            <summary>
            Specify a packet delay in ms
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.DelayPipelineNode.OnInput(CANAPE.DataFrames.DataFrame)">
            <summary>
            Called when a new frame arrives (just forwards)
            </summary>
            <param name="frame"></param>
        </member>
        <member name="T:CANAPE.Nodes.DirectPipelineNode">
            <summary>
            Simple node which writes input to output with no processing
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.DirectPipelineNode.OnInput(CANAPE.DataFrames.DataFrame)">
            <summary>
            Called when a new frame arrives (just forwards)
            </summary>
            <param name="frame"></param>
        </member>
        <member name="T:CANAPE.Nodes.EditPacketEventArgs">
            <summary>
            Event arguments when a packet needs editing
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.EditPacketEventArgs.Frame">
            <summary>
            The data frame to edit
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.EditPacketEventArgs.Sender">
            <summary>
            The sending node
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.EditPacketEventArgs.Color">
            <summary>
            The color to display in the edit window (if applicable)
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.EditPacketEventArgs.Tag">
            <summary>
            The textual tag to display in the edit window (if applicable)
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.EditPacketEventArgs.#ctor(CANAPE.DataFrames.DataFrame,CANAPE.Nodes.BasePipelineNode,CANAPE.Utils.ColorValue,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="frame">The data frame to edit</param>
            <param name="sender">The sending node</param>
            <param name="color">The colour to show in an edit window</param>
            <param name="tag">The textual tag to show in an edit window</param>
        </member>
        <member name="T:CANAPE.Nodes.EditPacketPipelineNode">
            <summary>
            A pipeline node which allows packets to be edited
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.EditPacketPipelineNode.#ctor(CANAPE.Utils.ColorValue,System.String)">
            <summary>
            Constructor
            </summary>        
            <param name="color">The colour to show in an edit window</param>
            <param name="tag">The textual tag to show in an edit window</param>
        </member>
        <member name="M:CANAPE.Nodes.EditPacketPipelineNode.OnInput(CANAPE.DataFrames.DataFrame)">
            <summary>
            Method called when a new frame arraives
            </summary>
            <param name="frame">The frame</param>
        </member>
        <member name="T:CANAPE.Nodes.IDataEndpoint">
            <summary>
            The interface to implement a server of data, 
            be that a client or a server in the traditional sense
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.IDataEndpoint.Run(CANAPE.DataAdapters.IDataAdapter)">
            <summary>
            Run the endpoint
            </summary>
            <param name="adapter">Adapter</param>
        </member>
        <member name="P:CANAPE.Nodes.IDataEndpoint.Description">
            <summary>
            Get a descriptive name for the endpoint
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.IDataEndpoint.Logger">
            <summary>
            Logger for endpoint.
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.IDataEndpoint.Meta">
            <summary>
            Meta
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.IDataEndpoint.GlobalMeta">
            <summary>
            Global meta
            </summary>
        </member>
        <member name="T:CANAPE.Nodes.IPersistNode">
            <summary>
            Interface to persist a node's state if required
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.IPersistNode.GetState(CANAPE.Utils.Logger)">
            <summary>
            Get the objects state
            </summary>
            <param name="logger">The logger to use</param>
            <remarks>The object state must be a serializable object otherwise it might not be recoverable</remarks>
            <returns>The object's state</returns>
        </member>
        <member name="M:CANAPE.Nodes.IPersistNode.SetState(System.Object,CANAPE.Utils.Logger)">
            <summary>
            Set the objects state
            </summary>
            <param name="state">The state object</param>        
            <param name="logger">The logger to use</param>
        </member>
        <member name="T:CANAPE.Nodes.IPipelineEndpoint">
            <summary>
            Interface for a pipeline endpoint
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.IPipelineEndpoint.Adapter">
            <summary>
            Get or set the data adapter
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.IPipelineEndpoint.Start">
            <summary>
            Start the node
            </summary>        
        </member>
        <member name="E:CANAPE.Nodes.IPipelineEndpoint.DataRecieved">
            <summary>
            Event signaled when data is received
            </summary>
        </member>
        <member name="T:CANAPE.Nodes.LogPacketEventArgs">
            <summary>
            Event arguments send when logging a packet
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.LogPacketEventArgs.Tag">
            <summary>
            The log tag string
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.LogPacketEventArgs.NetId">
            <summary>
            The unique id of the network it came from
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.LogPacketEventArgs.Frame">
            <summary>
            The frame to log
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.LogPacketEventArgs.Color">
            <summary>
            The color of the log entry
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.LogPacketEventArgs.NetworkDescription">
            <summary>
            The network description
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.LogPacketEventArgs.Timestamp">
            <summary>
            The time which this packet was logged
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.LogPacketEventArgs.#ctor(System.String,System.Guid,CANAPE.DataFrames.DataFrame,CANAPE.Utils.ColorValue,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="tag">The log tag</param>
            <param name="netId">The log network ID</param>
            <param name="frame">The log frame</param>
            <param name="color">The log colour</param>
            <param name="networkDescription">The log description</param>
        </member>
        <member name="T:CANAPE.Nodes.LogPacketPipelineNode">
            <summary>
            Log packet pipeline node
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.LogPacketPipelineNode.Color">
            <summary>
            Color of the log entry
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.LogPacketPipelineNode.Tag">
            <summary>
            A textual tag to log
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.LogPacketPipelineNode.ConvertToBytes">
            <summary>
            If true then all logged frames will be converted to bytes
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.LogPacketPipelineNode.OnInput(CANAPE.DataFrames.DataFrame)">
            <summary>
            OnInput method
            </summary>
            <param name="frame"></param>
        </member>
        <member name="T:CANAPE.Nodes.MetaDictionary">
            <summary>
            Meta data dictionary
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.MetaDictionary.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.MetaDictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Constructor
            </summary>
            <param name="e">An enumerable object to use</param>
        </member>
        <member name="M:CANAPE.Nodes.MetaDictionary.#ctor(CANAPE.Nodes.MetaDictionary)">
            <summary>
            Constructor
            </summary>        
            <param name="dict">Other dictionary</param>
        </member>
        <member name="M:CANAPE.Nodes.MetaDictionary.IncrementCounter(System.String,System.Int32,System.Int32)">
            <summary>
            Increment a counter
            </summary>
            <param name="name">The name of the counter</param>
            <param name="startValue">The initial value of the counter</param>
            <param name="increment">The value to increment the counter by if it exists</param>
            <returns>The current value of the counter</returns>
        </member>
        <member name="M:CANAPE.Nodes.MetaDictionary.IncrementCounterLong(System.String,System.Int64,System.Int64)">
            <summary>
            Increment a counter (long)
            </summary>
            <param name="name">The name of the counter</param>
            <param name="startValue">The initial value of the counter</param>
            <param name="increment">The value to increment the counter by if it exists</param>
            <returns>The current value of the counter</returns>
        </member>
        <member name="M:CANAPE.Nodes.MetaDictionary.GetMeta(System.String)">
            <summary>
            Get a meta value from the public scope
            </summary>
            <param name="name">The name of the meta parameter</param>         
            <returns>The dynamic object or null if not found</returns>        
        </member>
        <member name="M:CANAPE.Nodes.MetaDictionary.GetMeta(System.String,System.Object)">
            <summary>
            Get a meta value from the public scope, if it does not exist then add to the meta
            </summary>
            <param name="name">The name of the meta parameter</param>     
            <param name="defaultValue">The default value to add, if null no value will be added</param>
            <returns>The dynamic object the default value if it does not exist</returns>   
        </member>
        <member name="M:CANAPE.Nodes.MetaDictionary.SetMeta(System.String,System.Object)">
            <summary>
            Set a meta value
            </summary>
            <param name="name">The name of the meta parameter</param>
            <param name="obj">The dynamic object, set to null to remove</param>
        </member>
        <member name="M:CANAPE.Nodes.MetaDictionary.GetCounter(System.String,System.Int32)">
            <summary>
            Get a counter from the meta
            </summary>
            <param name="name">The name of the counter</param>
            <param name="defaultValue">The default value if it doesn't exist</param>
            <returns>The current value of the counter</returns>
        </member>
        <member name="M:CANAPE.Nodes.MetaDictionary.IncrementCounter(System.String,System.Int32)">
            <summary>
            Increment a counter, will add if it doesn't exist (starting from 0)
            </summary>
            <param name="name">The name of the counter</param>
            <param name="increment">The value to increment the counter by</param>
            <returns>The new value of the counter</returns>
        </member>
        <member name="M:CANAPE.Nodes.MetaDictionary.IncrementCounterLong(System.String,System.Int64)">
            <summary>
            Increment a counter (long), will add if it doesn't exist (starting from 0)
            </summary>
            <param name="name">The name of the counter</param>
            <param name="increment">The value to increment the counter by</param>
            <returns>The new value of the counter</returns>
        </member>
        <member name="M:CANAPE.Nodes.MetaDictionary.SetCounter(System.String,System.Int32)">
            <summary>
            Set a counter to a specific value
            </summary>
            <param name="name">The name of the counter</param>
            <param name="value">The value of the counter</param>
        </member>
        <member name="T:CANAPE.Nodes.NetGraph">
            <summary>
            Netgraph object
            </summary>
        </member>
        <member name="F:CANAPE.Nodes.NetGraph._isDisposed">
            <summary>
            Value to indicate the graph has already been disposed
            </summary>
        </member>
        <member name="F:CANAPE.Nodes.NetGraph._graphShutdown">
            <summary>
            Value to indicate the graph has been shutdown
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.NetGraph.Nodes">
            <summary>
            The list of nodes in the graph
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.NetGraph.GlobalMeta">
            <summary>
            Global meta data (global to the current service)
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.NetGraph.Meta">
            <summary>
            Extra meta-data associated with the graph
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.NetGraph.Properties">
            <summary>
            List of user defined properties
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.NetGraph.ConnectionProperties">
            <summary>
            A container for read only properties about the connection
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.NetGraph.Uuid">
            <summary>
            A unique random guid generated for each new graph
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.NetGraph.NetworkDescription">
            <summary>
            Textual description of the network
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.NetGraph.Logger">
            <summary>
            Get or set the logger
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.NetGraph.Parent">
            <summary>
            Indicates the parent graph, set to null if no parent
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.NetGraph.Name">
            <summary>
            Provides a name for the graph
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.NetGraph.CreatedTicks">
            <summary>
            Indicates the number of ticks when this graph was created
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.NetGraph.Created">
            <summary>
            Indicates the original time when this was created.
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.NetGraph.ServiceProvider">
            <summary>
            An ServiceProvider for services related to this connection
            </summary>
        </member>
        <member name="E:CANAPE.Nodes.NetGraph.GraphShutdown">
            <summary>
            An event which indicates the graph has been shutdown
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.#ctor(CANAPE.Utils.Logger,CANAPE.Nodes.NetGraph,CANAPE.Nodes.MetaDictionary,CANAPE.Nodes.MetaDictionary,CANAPE.Utils.PropertyBag)">
            <summary>
            Default constructor
            </summary>
            <param name="globalMeta">Global meta data</param>
            <param name="logger">Logger</param>
            <param name="meta">Local meta data</param>
            <param name="parent">Parent graph if available</param>
            <param name="properties">A property bag associated with this connection</param>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.GetMeta(System.String)">
            <summary>
            Get a meta value from the public scope
            </summary>
            <param name="name">The name of the meta parameter</param>         
            <returns>The dynamic object or null if not found</returns>        
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.GetMeta(System.String,System.Object)">
            <summary>
            Get a meta value from the public scope, if it does not exist then add to the meta
            </summary>
            <param name="name">The name of the meta parameter</param>     
            <param name="defaultValue">The default value to add, if null no value will be added</param>
            <returns>The dynamic object the default value if it does not exist</returns>   
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.GetMeta(System.String,System.Object,System.Boolean)">
            <summary>
            Get a meta value, if it does not exist then add to the meta
            </summary>
            <param name="name">The name of the meta parameter</param>         
            <param name="defaultValue">The default value to add, if null no value will be added</param>
            <param name="privateScope">If true then searches the private scope</param>
            <returns>The dynamic object the default value if it does not exist</returns>  
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.SetMeta(System.String,System.Object,System.Boolean)">
            <summary>
            Set a meta value
            </summary>
            <param name="name">The name of the meta parameter</param>
            <param name="obj">The dynamic object, set to null to remove</param>
            <param name="privateScope">If true then added to private meta scope</param>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.SetMeta(System.String,System.Object)">
            <summary>
            Set a meta value, in the public scope 
            </summary>
            <param name="name">The name of the meta parameter</param>
            <param name="obj">The dynamic object, set to null to remove</param>        
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.GetGlobalMeta(System.String)">
            <summary>
            Get a global meta value from the public scope
            </summary>
            <param name="name">The name of the meta parameter</param>         
            <returns>The dynamic object or null if not found</returns>        
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.GetGlobalMeta(System.String,System.Object)">
            <summary>
            Get a global meta value from the public scope, if it does not exist then add to the meta
            </summary>
            <param name="name">The name of the meta parameter</param>     
            <param name="defaultValue">The default value to add, if null no value will be added</param>
            <returns>The dynamic object the default value if it does not exist</returns>   
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.GetGlobalMeta(System.String,System.Object,System.Boolean)">
            <summary>
            Get a global meta value, if it does not exist then add to the meta
            </summary>
            <param name="name">The name of the meta parameter</param>         
            <param name="defaultValue">The default value to add, if null no value will be added</param>
            <param name="privateScope">If true then searches the private scope</param>
            <returns>The dynamic object the default value if it does not exist</returns>  
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.SetGlobalMeta(System.String,System.Object,System.Boolean)">
            <summary>
            Set a global meta value
            </summary>
            <param name="name">The name of the meta parameter</param>
            <param name="obj">The dynamic object, set to null to remove</param>
            <param name="privateScope">If true then added to private meta scope</param>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.SetGlobalMeta(System.String,System.Object)">
            <summary>
            Set a global meta value, in the public scope 
            </summary>
            <param name="name">The name of the meta parameter</param>
            <param name="obj">The dynamic object, set to null to remove</param>        
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.GetCounter(System.String,System.Int32,System.Boolean)">
            <summary>
            Get a counter from the meta
            </summary>
            <param name="name">The name of the counter</param>
            <param name="defaultValue">The default value if it doesn't exist</param>
            <param name="privateScope">Whether to add in private scope</param>
            <returns>The current value of the counter</returns>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.GetCounter(System.String,System.Int32)">
            <summary>
            Get a counter from the meta public scope
            </summary>
            <param name="name">The name of the counter</param>
            <param name="defaultValue">The default value if it doesn't exist</param>
            <returns>The current value of the counter</returns>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.IncrementCounter(System.String,System.Int32,System.Boolean)">
            <summary>
            Increment a counter, will add if it doesn't exist (starting from 0)
            </summary>
            <param name="name">The name of the counter</param>
            <param name="increment">The value to increment the counter by</param>
            <param name="privateScope">Whether to add in private scope</param>
            <returns>The new value of the counter</returns>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.IncrementCounter(System.String,System.Int32)">
            <summary>
            Increment a counter in the public scope, will add if it doesn't exist (starting from 0)
            </summary>
            <param name="name">The name of the counter</param>
            <param name="increment">The value to increment the counter by</param>
            <returns>The new value of the counter</returns>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.SetCounter(System.String,System.Int32,System.Boolean)">
            <summary>
            Set a counter to a specific value
            </summary>
            <param name="name">The name of the counter</param>
            <param name="value">The value of the counter</param>
            <param name="privateScope">Whether to add in private scope</param>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.SetCounter(System.String,System.Int32)">
            <summary>
            Set a counter to a specific value
            </summary>
            <param name="name">The name of the counter</param>
            <param name="value">The value of the counter</param>        
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.GetGlobalCounter(System.String,System.Int32,System.Boolean)">
            <summary>
            Get a counter from the global meta
            </summary>
            <param name="name">The name of the counter</param>
            <param name="defaultValue">The default value if it doesn't exist</param>
            <param name="privateScope">Whether to add in private scope</param>
            <returns>The current value of the counter</returns>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.GetGlobalCounter(System.String,System.Int32)">
            <summary>
            Get a counter from the global meta public scope
            </summary>
            <param name="name">The name of the counter</param>
            <param name="defaultValue">The default value if it doesn't exist</param>
            <returns>The current value of the counter</returns>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.IncrementGlobalCounter(System.String,System.Int32,System.Boolean)">
            <summary>
            Increment a global counter, will add if it doesn't exist (starting from 0)
            </summary>
            <param name="name">The name of the counter</param>
            <param name="increment">The value to increment the counter by</param>
            <param name="privateScope">Whether to add in private scope</param>
            <returns>The new value of the counter</returns>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.IncrementGlobalCounter(System.String,System.Int32)">
            <summary>
            Increment a global counter in the public scope, will add if it doesn't exist (starting from 0)
            </summary>
            <param name="name">The name of the counter</param>
            <param name="increment">The value to increment the counter by</param>        
            <returns>The new value of the counter</returns>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.SetGlobalCounter(System.String,System.Int32,System.Boolean)">
            <summary>
            Set a global counter to a specific value
            </summary>
            <param name="name">The name of the counter</param>
            <param name="value">The value of the counter</param>
            <param name="privateScope">Whether to add in private scope</param>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.SetGlobalCounter(System.String,System.Int32)">
            <summary>
            Set a global counter to a specific value
            </summary>
            <param name="name">The name of the counter</param>
            <param name="value">The value of the counter</param>        
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.GetProperty(System.String)">
            <summary>
            Get a property value
            </summary>
            <param name="name">The name of the property</param>
            <returns>The property string, null if not available</returns>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.SetProperty(System.String,System.String)">
            <summary>
            Set a property value
            </summary>
            <param name="name">The name</param>
            <param name="value">The value, null to remove it</param>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.GetNodeByName(System.String)">
            <summary>
            Get a node by name
            </summary>
            <param name="name">The name of the node or the UUID</param>
            <returns>The node instance, or null if it doesn't exist</returns>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.AddNode(System.Guid,CANAPE.Nodes.BasePipelineNode)">
            <summary>
            Add a node to the graph and ensure shutdown event is handled
            </summary>
            <param name="uuid">The Guid of the factory</param>
            <param name="node">The node itself</param>
        </member>
        <member name="P:CANAPE.Nodes.NetGraph.IsDisposed">
            <summary>
            Indicates the connection is disposed
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.CheckShutdown">
            <summary>
            Check if shutdown, all nodes with an inbound connection must be shutdown
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.BindEndpoint(System.Guid,CANAPE.DataAdapters.IDataAdapter)">
            <summary>
            Method to bind an endpoint
            </summary>
            <param name="id"></param>
            <param name="adapter"></param>
        </member>
        <member name="E:CANAPE.Nodes.NetGraph.LogPacketEvent">
            <summary>
            Event when the graph wants to log a packet
            </summary>
        </member>
        <member name="E:CANAPE.Nodes.NetGraph.EditPacketEvent">
            <summary>
            Event when the graph wants to edit a packet
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.GetTopGraph">
            <summary>
            Get the top graph on the stack of parents
            </summary>
            <returns>The top graph</returns>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.DoLogPacket(System.String,CANAPE.Utils.ColorValue,CANAPE.DataFrames.DataFrame,System.Boolean)">
            <summary>
            Log a packet from the graph
            </summary>
            <param name="tag">A textual tag for the frame</param>
            <param name="color">The color to display the frame (if applicable)</param>
            <param name="frame">The frame to log, note this must be cloned to preserve its value</param>
            <param name="logAsBytes">Indicates whether the packet should be logged as a byte array</param>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.DoLogPacket(System.String,System.Byte,System.Byte,System.Byte,CANAPE.DataFrames.DataFrame,System.Boolean)">
            <summary>
            Log a packet from the graph with separated colour values
            </summary>
            <param name="tag">A textual tag for the frame</param>
            <param name="r">Red value</param>
            <param name="g">Green value</param>
            <param name="b">Blue value</param>
            <param name="frame">The frame to log, note this will be cloned to preserve its value</param>
            <param name="logAsBytes">Indicates whether the packet should be logged as a byte array</param>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.OnLogPacket(System.String,CANAPE.Utils.ColorValue,CANAPE.DataFrames.DataFrame,System.Boolean)">
            <summary>
            Log a packet from the graph
            </summary>
            <param name="tag">A textual tag for the frame</param>
            <param name="color">The color to display the frame (if applicable)</param>
            <param name="frame">The frame to log, note this must be cloned to preserve its value</param>
            <param name="logAsBytes">Indicates whether the packet should be logged as a byte array</param>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.OnEditPacket(CANAPE.Nodes.NetGraph,CANAPE.Nodes.EditPacketEventArgs)">
            <summary>
            Method to dispatch edit packet event
            </summary>
            <param name="graph">The graph which originated the edit</param>
            <param name="e">The event arguments</param>
            <returns></returns>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.DoEditPacket(CANAPE.DataFrames.DataFrame,CANAPE.Nodes.BasePipelineNode,CANAPE.Utils.ColorValue,System.String)">
            <summary>
            Edit a packet from the graph
            </summary>
            <param name="frame">The frame to edit</param>
            <param name="sender">The sending nod</param>
            <param name="color">The colour to show in an edit window (if applicable)</param>
            <param name="tag">The textual tag to show in an edit window (if applicable)</param>
            <returns>The returned frame, this may or may not be the same frame as sent</returns>        
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.Start">
            <summary>
            Start the netgraph running
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.NetGraph.ToString">
            <summary>
            To string override
            </summary>
            <returns>The name of the graph</returns>
        </member>
        <member name="T:CANAPE.Nodes.NetGraphContainerNode">
            <summary>
            A node to contain a netgraph
            </summary>
        </member>
        <member name="T:CANAPE.Nodes.NetGraphContainerNode.GraphDirection">
            <summary>
            Enumeration to determine direction of flow in the graph
            </summary>
        </member>
        <member name="F:CANAPE.Nodes.NetGraphContainerNode.GraphDirection.ClientToServer">
            <summary>
            Go from client to server
            </summary>
        </member>
        <member name="F:CANAPE.Nodes.NetGraphContainerNode.GraphDirection.ServerToClient">
            <summary>
            Go from server to client
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.NetGraphContainerNode.EventDataAdapter.ToString">
            <summary>
            Overriden ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:CANAPE.Nodes.NetGraphContainerNode.EventDataAdapter.Reconnect">
            <summary>
            Reconnect the data adapter
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown</exception>
        </member>
        <member name="P:CANAPE.Nodes.NetGraphContainerNode.ContainedGraph">
            <summary>
            Get the graph this node contains
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.NetGraphContainerNode.LinkedNode">
            <summary>
            Indicates whether this is a linked node or not
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.NetGraphContainerNode.#ctor(CANAPE.Nodes.NetGraphContainerNode,CANAPE.Utils.Logger)">
            <summary>
            Constructor for when created a linked version of the node
            </summary>        
            <param name="linkedNode">The linked master node</param>                
            <param name="logger">The associated logger</param>        
        </member>
        <member name="M:CANAPE.Nodes.NetGraphContainerNode.#ctor(System.String,CANAPE.NodeFactories.NetGraphFactory,CANAPE.Nodes.NetGraphContainerNode.GraphDirection,CANAPE.Nodes.NetGraph,CANAPE.Utils.Logger,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of the factory</param>
            <param name="factory">Factory</param>
            <param name="direction">Direction of graph</param>        
            <param name="containerGraph">The parent graph</param>
            <param name="logger">The logger to use</param>
            <param name="stateDictionary">Forwarded state dictionary</param>
            <param name="linked">If true then we are creating a linked master node</param>
        </member>
        <member name="M:CANAPE.Nodes.NetGraphContainerNode.OnInput(CANAPE.DataFrames.DataFrame)">
            <summary>
            
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:CANAPE.Nodes.NetGraphContainerNode.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:CANAPE.Nodes.NetGraphContainerNode.OnShutdown">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:CANAPE.Nodes.PersistNodeImpl`2">
            <summary>
            A base implementation for persisting a node
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.PersistNodeImpl`2.#ctor">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="F:CANAPE.Nodes.PersistNodeImpl`2._config">
            <summary>
            Config object
            </summary>
        </member>
        <member name="P:CANAPE.Nodes.PersistNodeImpl`2.Config">
            <summary>
            The current config
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.PersistNodeImpl`2.ValidateConfig(`0)">
            <summary>
            Overridable method to validate config, should throw an ArgumentException if invalid
            </summary>
            <param name="config">The config</param>
        </member>
        <member name="M:CANAPE.Nodes.PersistNodeImpl`2.GetState(CANAPE.Utils.Logger)">
            <summary>
            Get the node state
            </summary>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:CANAPE.Nodes.PersistNodeImpl`2.SetState(System.Object,CANAPE.Utils.Logger)">
            <summary>
            Set the node state
            </summary>
            <param name="state"></param>
            <param name="logger"></param>
        </member>
        <member name="T:CANAPE.Nodes.PipelineEndpoint">
            <summary>
            A pipeline node which acts as a data adapter endpoint
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.PipelineEndpoint.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.PipelineEndpoint.ReadDataFrame">
            <summary>
            Allows the reading of frames to be overriden
            </summary>
            <returns>The read frame</returns>
        </member>
        <member name="M:CANAPE.Nodes.PipelineEndpoint.ShutdownOutputs">
            <summary>
            Shutdown the outputs of the node without actually going through the normal channels
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.PipelineEndpoint.OnInput(CANAPE.DataFrames.DataFrame)">
            <summary>
            Method called when new input is received
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:CANAPE.Nodes.PipelineEndpoint.Start">
            <summary>
            Start the endpoint running
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.PipelineEndpoint.OnShutdown">
            <summary>
            Function called when the the adapter is being shutdown
            </summary>
        </member>
        <member name="M:CANAPE.Nodes.PipelineEndpoint.Dispose(System.Boolean)">
            <summary>
            Called to dispose the object
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:CANAPE.Nodes.PipelineEndpoint.Adapter">
            <summary>
            Get or set adapter
            </summary>
        </member>
        <member name="E:CANAPE.Nodes.PipelineEndpoint.DataRecieved">
            <summary>
            Event signaled when data recieved
            </summary>
        </member>
        <member name="T:CANAPE.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.BaseNodeFactory_Create">
            <summary>
              Looks up a localized string similar to Error creating node {0} - {1}.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.BinaryDataFrameFilterFactory_MatchDescription">
            <summary>
              Looks up a localized string similar to Matching binary data.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.ColorValue_InvalidStringFormat">
            <summary>
              Looks up a localized string similar to Invalid color string format, should be a hex string in form of #RRGGBB or an X11 color name.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.DataFrame_Exception1">
            <summary>
              Looks up a localized string similar to Cannot set current node to be one from another frame.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.DataReader_InvalidBitCount">
            <summary>
              Looks up a localized string similar to Can only read between 0 and 63 bits from a stream at a time.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.DataReader_InvalidPrimitiveType">
            <summary>
              Looks up a localized string similar to Invalid primitive type passed to ReadPrimitive - {0}.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.DataReader_ReadBytesEof">
            <summary>
              Looks up a localized string similar to Could not read all requested bytes.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.DataReader_ReadCharEof">
            <summary>
              Looks up a localized string similar to Could not read a valid character from the stream.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.DataWriter_InvalidBitCount">
            <summary>
              Looks up a localized string similar to Can only write between 0 and 63 bits from a stream at a time.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.DataWriter_InvalidPrimitiveType">
            <summary>
              Looks up a localized string similar to Invalid primitive type passed to WritePrimitive - {0}.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.GeneralUtils_DecodeEscapedInvalidEscape">
            <summary>
              Looks up a localized string similar to Invalid escape sequence encountered.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.GeneralUtils_DecodeEscapedStringTrailingSlash">
            <summary>
              Looks up a localized string similar to Invalid trailing backslash in escaped string.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.GeneralUtils_DecodeEscapedStringUnknownEscape">
            <summary>
              Looks up a localized string similar to Unknown string escape sequence {0}.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.GeneralUtils_InvalidHexString">
            <summary>
              Looks up a localized string similar to String must only contain bytes in hex or spaces.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.GeneralUtils_InvalidHexStringLength">
            <summary>
              Looks up a localized string similar to Hex string must be a multiple of 2 hex characters.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.GetConfigDir_ErrorCreatingDir">
            <summary>
              Looks up a localized string similar to Error creating user config directory.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.Int24_InvalidCompareObject">
            <summary>
              Looks up a localized string similar to Object passed to CompareTo not a Int24.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.MissingDataNodeException_DefaultMessage">
            <summary>
              Looks up a localized string similar to Cannot find DataNode {0}.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.NetGraph_InvalidEndpointId">
            <summary>
              Looks up a localized string similar to Invalid endpoint ID {0}.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.NetGraphContainerFactory_MustSpecifyGraph">
            <summary>
              Looks up a localized string similar to A graph must be specified for container.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.NetGraphContainerNode_InvalidGraph">
            <summary>
              Looks up a localized string similar to Subgraph must have a client and server node.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.NetGraphFactory_NoClientEndpoint">
            <summary>
              Looks up a localized string similar to Must have a client endpoint to go from client to server.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.NetGraphFactory_NoServerEndpoint">
            <summary>
              Looks up a localized string similar to Must have a server endpoint to go from server to client.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.NodeCountDataFrameFilterFactory_CountDescription">
            <summary>
              Looks up a localized string similar to The number of selected nodes to test against.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.NodeCountDataFrameFilterFactory_DisplayString">
            <summary>
              Looks up a localized string similar to {0} {1} selected nodes.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.NodeCountDataFrameFilterFactory_OperationDescription">
            <summary>
              Looks up a localized string similar to Comparion operation.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.PersistNodeImpl_InvalidConfig">
            <summary>
              Looks up a localized string similar to Invalid config passed for {0} class, using existing value.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.ReadLine_CountNotReadFromStream">
            <summary>
              Looks up a localized string similar to Could not read out another line from the stream.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.ToUnixTime_CannotConvert">
            <summary>
              Looks up a localized string similar to Cannot convert {0} to unix time, out of range.
            </summary>
        </member>
        <member name="P:CANAPE.Properties.Resources.UInt24_InvalidCompareObject">
            <summary>
              Looks up a localized string similar to Object passed to CompareTo not a UInt24.
            </summary>
        </member>
        <member name="T:CANAPE.Utils.BinaryEncoding">
            <summary>
            Encoding class to convert to and from binary data
            </summary>
        </member>
        <member name="F:CANAPE.Utils.BinaryEncoding.Instance">
            <summary>
            Static instance of a binary encoding, as there is rarely a state there is rarely a reason to create a new one
            </summary>
        </member>
        <member name="M:CANAPE.Utils.BinaryEncoding.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CANAPE.Utils.BinaryEncoding.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="encodeControl">Indicates control characters are changed</param>        
        </member>
        <member name="P:CANAPE.Utils.BinaryEncoding.EncodingName">
            <summary>
            Get encoding name
            </summary>
        </member>
        <member name="M:CANAPE.Utils.BinaryEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            Get the number of bytes
            </summary>
            <param name="chars"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns>Always count</returns>
        </member>
        <member name="M:CANAPE.Utils.BinaryEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Get bytes
            </summary>
            <param name="chars"></param>
            <param name="charIndex"></param>
            <param name="charCount"></param>
            <param name="bytes"></param>
            <param name="byteIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CANAPE.Utils.BinaryEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:CANAPE.Utils.BinaryEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="byteIndex"></param>
            <param name="byteCount"></param>
            <param name="chars"></param>
            <param name="charIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CANAPE.Utils.BinaryEncoding.GetMaxByteCount(System.Int32)">
            <summary>
            
            </summary>
            <param name="charCount"></param>
            <returns></returns>
        </member>
        <member name="M:CANAPE.Utils.BinaryEncoding.GetMaxCharCount(System.Int32)">
            <summary>
            
            </summary>
            <param name="byteCount"></param>
            <returns></returns>
        </member>
        <member name="P:CANAPE.Utils.BinaryEncoding.IsSingleByte">
            <summary>
            Indicates this is a single byte encoding
            </summary>
        </member>
        <member name="T:CANAPE.Utils.BinaryStringEncoding">
            <summary>
            The encoding to use if the selected nodes are not strings
            </summary>
        </member>
        <member name="F:CANAPE.Utils.BinaryStringEncoding.ASCII">
            <summary>
            8 bit ascii encoding
            </summary>
        </member>
        <member name="F:CANAPE.Utils.BinaryStringEncoding.UTF8">
            <summary>
            UTF8
            </summary>
        </member>
        <member name="F:CANAPE.Utils.BinaryStringEncoding.UTF7">
            <summary>
            UTF7
            </summary>
        </member>
        <member name="F:CANAPE.Utils.BinaryStringEncoding.UTF16_LE">
            <summary>
            UTF16 little endian
            </summary>
        </member>
        <member name="F:CANAPE.Utils.BinaryStringEncoding.UTF16_BE">
            <summary>
            UTF16 big endian
            </summary>
        </member>
        <member name="F:CANAPE.Utils.BinaryStringEncoding.UTF32_LE">
            <summary>
            UTF32 little endian
            </summary>
        </member>
        <member name="F:CANAPE.Utils.BinaryStringEncoding.UTF32_BE">
            <summary>
            UTF32 big endian
            </summary>
        </member>
        <member name="F:CANAPE.Utils.BinaryStringEncoding.EBCDIC_US">
            <summary>
            EBDIC (US)
            </summary>
        </member>
        <member name="F:CANAPE.Utils.BinaryStringEncoding.Latin1">
            <summary>
            IBM Latin 1
            </summary>
        </member>
        <member name="F:CANAPE.Utils.BinaryStringEncoding.ShiftJIS">
            <summary>
            Shift-JIS (Japanese)
            </summary>
        </member>
        <member name="T:CANAPE.Utils.ColorValue">
            <summary>
            This structure is used to hold a 32bit colour, makes us independant of System.Drawing
            </summary>
        </member>
        <member name="F:CANAPE.Utils.ColorValue.R">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:CANAPE.Utils.ColorValue.G">
            <summary>
            Green
            </summary>
        </member>
        <member name="F:CANAPE.Utils.ColorValue.B">
            <summary>
            Blue
            </summary>
        </member>
        <member name="F:CANAPE.Utils.ColorValue.A">
            <summary>
            Alpha
            </summary>
        </member>
        <member name="M:CANAPE.Utils.ColorValue.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructor
            </summary>
            <param name="r">Red value</param>
            <param name="g">Green value</param>
            <param name="b">Blue value</param>
            <param name="a">Alpha value</param>
        </member>
        <member name="M:CANAPE.Utils.ColorValue.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructor, set color values with maximum alpha
            </summary>
            <param name="r">Red value</param>
            <param name="g">Green value</param>
            <param name="b">Blue value</param>
        </member>
        <member name="M:CANAPE.Utils.ColorValue.op_Equality(CANAPE.Utils.ColorValue,CANAPE.Utils.ColorValue)">
            <summary>
            Equality operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:CANAPE.Utils.ColorValue.op_Inequality(CANAPE.Utils.ColorValue,CANAPE.Utils.ColorValue)">
            <summary>
            Inequality operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:CANAPE.Utils.ColorValue.Equals(System.Object)">
            <summary>
            Equals method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CANAPE.Utils.ColorValue.GetHashCode">
            <summary>
            Hashcode method
            </summary>
            <returns></returns>
        </member>
        <member name="M:CANAPE.Utils.ColorValue.ToString">
            <summary>
            To String 
            </summary>
            <returns>Converts to a string</returns>
        </member>
        <member name="M:CANAPE.Utils.ColorValue.TryParse(System.String,CANAPE.Utils.ColorValue@)">
            <summary>
            Try parsing the string
            </summary>
            <param name="str">The string to parse, should be in form of #RRGGBB where values are hex or an X11 color name</param>
            <param name="color">The output color value</param>
            <returns>True if could parse the string</returns>
        </member>
        <member name="M:CANAPE.Utils.ColorValue.Parse(System.String)">
            <summary>
            Parse a string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Snow">
            <summary>
            X11 Color Snow (255,250,250)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Ghostwhite">
            <summary>
            X11 Color Ghostwhite (248,248,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Whitesmoke">
            <summary>
            X11 Color Whitesmoke (245,245,245)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gainsboro">
            <summary>
            X11 Color Gainsboro (220,220,220)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Floralwhite">
            <summary>
            X11 Color Floralwhite (255,250,240)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Oldlace">
            <summary>
            X11 Color Oldlace (253,245,230)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Linen">
            <summary>
            X11 Color Linen (250,240,230)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Antiquewhite">
            <summary>
            X11 Color Antiquewhite (250,235,215)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Papayawhip">
            <summary>
            X11 Color Papayawhip (255,239,213)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Blanchedalmond">
            <summary>
            X11 Color Blanchedalmond (255,235,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Bisque">
            <summary>
            X11 Color Bisque (255,228,196)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Peachpuff">
            <summary>
            X11 Color Peachpuff (255,218,185)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Navajowhite">
            <summary>
            X11 Color Navajowhite (255,222,173)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Moccasin">
            <summary>
            X11 Color Moccasin (255,228,181)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Cornsilk">
            <summary>
            X11 Color Cornsilk (255,248,220)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Ivory">
            <summary>
            X11 Color Ivory (255,255,240)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lemonchiffon">
            <summary>
            X11 Color Lemonchiffon (255,250,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Seashell">
            <summary>
            X11 Color Seashell (255,245,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Honeydew">
            <summary>
            X11 Color Honeydew (240,255,240)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mintcream">
            <summary>
            X11 Color Mintcream (245,255,250)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Azure">
            <summary>
            X11 Color Azure (240,255,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Aliceblue">
            <summary>
            X11 Color Aliceblue (240,248,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lavender">
            <summary>
            X11 Color Lavender (230,230,250)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lavenderblush">
            <summary>
            X11 Color Lavenderblush (255,240,245)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mistyrose">
            <summary>
            X11 Color Mistyrose (255,228,225)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.White">
            <summary>
            X11 Color White (255,255,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Black">
            <summary>
            X11 Color Black (0,0,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkslategray">
            <summary>
            X11 Color Darkslategray (47,79,79)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkslategrey">
            <summary>
            X11 Color Darkslategrey (47,79,79)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Dimgray">
            <summary>
            X11 Color Dimgray (105,105,105)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Dimgrey">
            <summary>
            X11 Color Dimgrey (105,105,105)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Slategray">
            <summary>
            X11 Color Slategray (112,128,144)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Slategrey">
            <summary>
            X11 Color Slategrey (112,128,144)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightslategray">
            <summary>
            X11 Color Lightslategray (119,136,153)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightslategrey">
            <summary>
            X11 Color Lightslategrey (119,136,153)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray">
            <summary>
            X11 Color Gray (190,190,190)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey">
            <summary>
            X11 Color Grey (190,190,190)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightgrey">
            <summary>
            X11 Color Lightgrey (211,211,211)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightgray">
            <summary>
            X11 Color Lightgray (211,211,211)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Midnightblue">
            <summary>
            X11 Color Midnightblue (25,25,112)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Navy">
            <summary>
            X11 Color Navy (0,0,128)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Navyblue">
            <summary>
            X11 Color Navyblue (0,0,128)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Cornflowerblue">
            <summary>
            X11 Color Cornflowerblue (100,149,237)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkslateblue">
            <summary>
            X11 Color Darkslateblue (72,61,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Slateblue">
            <summary>
            X11 Color Slateblue (106,90,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mediumslateblue">
            <summary>
            X11 Color Mediumslateblue (123,104,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightslateblue">
            <summary>
            X11 Color Lightslateblue (132,112,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mediumblue">
            <summary>
            X11 Color Mediumblue (0,0,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Royalblue">
            <summary>
            X11 Color Royalblue (65,105,225)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Blue">
            <summary>
            X11 Color Blue (0,0,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Dodgerblue">
            <summary>
            X11 Color Dodgerblue (30,144,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Deepskyblue">
            <summary>
            X11 Color Deepskyblue (0,191,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Skyblue">
            <summary>
            X11 Color Skyblue (135,206,235)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightskyblue">
            <summary>
            X11 Color Lightskyblue (135,206,250)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Steelblue">
            <summary>
            X11 Color Steelblue (70,130,180)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightsteelblue">
            <summary>
            X11 Color Lightsteelblue (176,196,222)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightblue">
            <summary>
            X11 Color Lightblue (173,216,230)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Powderblue">
            <summary>
            X11 Color Powderblue (176,224,230)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Paleturquoise">
            <summary>
            X11 Color Paleturquoise (175,238,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkturquoise">
            <summary>
            X11 Color Darkturquoise (0,206,209)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mediumturquoise">
            <summary>
            X11 Color Mediumturquoise (72,209,204)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Turquoise">
            <summary>
            X11 Color Turquoise (64,224,208)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Cyan">
            <summary>
            X11 Color Cyan (0,255,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightcyan">
            <summary>
            X11 Color Lightcyan (224,255,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Cadetblue">
            <summary>
            X11 Color Cadetblue (95,158,160)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mediumaquamarine">
            <summary>
            X11 Color Mediumaquamarine (102,205,170)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Aquamarine">
            <summary>
            X11 Color Aquamarine (127,255,212)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkgreen">
            <summary>
            X11 Color Darkgreen (0,100,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkolivegreen">
            <summary>
            X11 Color Darkolivegreen (85,107,47)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkseagreen">
            <summary>
            X11 Color Darkseagreen (143,188,143)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Seagreen">
            <summary>
            X11 Color Seagreen (46,139,87)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mediumseagreen">
            <summary>
            X11 Color Mediumseagreen (60,179,113)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightseagreen">
            <summary>
            X11 Color Lightseagreen (32,178,170)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Palegreen">
            <summary>
            X11 Color Palegreen (152,251,152)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Springgreen">
            <summary>
            X11 Color Springgreen (0,255,127)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lawngreen">
            <summary>
            X11 Color Lawngreen (124,252,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Green">
            <summary>
            X11 Color Green (0,255,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Chartreuse">
            <summary>
            X11 Color Chartreuse (127,255,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mediumspringgreen">
            <summary>
            X11 Color Mediumspringgreen (0,250,154)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Greenyellow">
            <summary>
            X11 Color Greenyellow (173,255,47)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Limegreen">
            <summary>
            X11 Color Limegreen (50,205,50)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Yellowgreen">
            <summary>
            X11 Color Yellowgreen (154,205,50)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Forestgreen">
            <summary>
            X11 Color Forestgreen (34,139,34)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Olivedrab">
            <summary>
            X11 Color Olivedrab (107,142,35)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkkhaki">
            <summary>
            X11 Color Darkkhaki (189,183,107)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Khaki">
            <summary>
            X11 Color Khaki (240,230,140)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Palegoldenrod">
            <summary>
            X11 Color Palegoldenrod (238,232,170)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightgoldenrodyellow">
            <summary>
            X11 Color Lightgoldenrodyellow (250,250,210)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightyellow">
            <summary>
            X11 Color Lightyellow (255,255,224)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Yellow">
            <summary>
            X11 Color Yellow (255,255,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gold">
            <summary>
            X11 Color Gold (255,215,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightgoldenrod">
            <summary>
            X11 Color Lightgoldenrod (238,221,130)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Goldenrod">
            <summary>
            X11 Color Goldenrod (218,165,32)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkgoldenrod">
            <summary>
            X11 Color Darkgoldenrod (184,134,11)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Rosybrown">
            <summary>
            X11 Color Rosybrown (188,143,143)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Indianred">
            <summary>
            X11 Color Indianred (205,92,92)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Saddlebrown">
            <summary>
            X11 Color Saddlebrown (139,69,19)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Sienna">
            <summary>
            X11 Color Sienna (160,82,45)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Peru">
            <summary>
            X11 Color Peru (205,133,63)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Burlywood">
            <summary>
            X11 Color Burlywood (222,184,135)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Beige">
            <summary>
            X11 Color Beige (245,245,220)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Wheat">
            <summary>
            X11 Color Wheat (245,222,179)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Sandybrown">
            <summary>
            X11 Color Sandybrown (244,164,96)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Tan">
            <summary>
            X11 Color Tan (210,180,140)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Chocolate">
            <summary>
            X11 Color Chocolate (210,105,30)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Firebrick">
            <summary>
            X11 Color Firebrick (178,34,34)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Brown">
            <summary>
            X11 Color Brown (165,42,42)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darksalmon">
            <summary>
            X11 Color Darksalmon (233,150,122)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Salmon">
            <summary>
            X11 Color Salmon (250,128,114)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightsalmon">
            <summary>
            X11 Color Lightsalmon (255,160,122)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Orange">
            <summary>
            X11 Color Orange (255,165,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkorange">
            <summary>
            X11 Color Darkorange (255,140,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Coral">
            <summary>
            X11 Color Coral (255,127,80)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightcoral">
            <summary>
            X11 Color Lightcoral (240,128,128)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Tomato">
            <summary>
            X11 Color Tomato (255,99,71)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Orangered">
            <summary>
            X11 Color Orangered (255,69,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Red">
            <summary>
            X11 Color Red (255,0,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Hotpink">
            <summary>
            X11 Color Hotpink (255,105,180)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Deeppink">
            <summary>
            X11 Color Deeppink (255,20,147)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Pink">
            <summary>
            X11 Color Pink (255,192,203)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightpink">
            <summary>
            X11 Color Lightpink (255,182,193)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Palevioletred">
            <summary>
            X11 Color Palevioletred (219,112,147)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Maroon">
            <summary>
            X11 Color Maroon (176,48,96)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mediumvioletred">
            <summary>
            X11 Color Mediumvioletred (199,21,133)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Violetred">
            <summary>
            X11 Color Violetred (208,32,144)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Magenta">
            <summary>
            X11 Color Magenta (255,0,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Violet">
            <summary>
            X11 Color Violet (238,130,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Plum">
            <summary>
            X11 Color Plum (221,160,221)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Orchid">
            <summary>
            X11 Color Orchid (218,112,214)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mediumorchid">
            <summary>
            X11 Color Mediumorchid (186,85,211)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkorchid">
            <summary>
            X11 Color Darkorchid (153,50,204)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkviolet">
            <summary>
            X11 Color Darkviolet (148,0,211)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Blueviolet">
            <summary>
            X11 Color Blueviolet (138,43,226)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Purple">
            <summary>
            X11 Color Purple (160,32,240)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mediumpurple">
            <summary>
            X11 Color Mediumpurple (147,112,219)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Thistle">
            <summary>
            X11 Color Thistle (216,191,216)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Snow1">
            <summary>
            X11 Color Snow1 (255,250,250)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Snow2">
            <summary>
            X11 Color Snow2 (238,233,233)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Snow3">
            <summary>
            X11 Color Snow3 (205,201,201)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Snow4">
            <summary>
            X11 Color Snow4 (139,137,137)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Seashell1">
            <summary>
            X11 Color Seashell1 (255,245,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Seashell2">
            <summary>
            X11 Color Seashell2 (238,229,222)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Seashell3">
            <summary>
            X11 Color Seashell3 (205,197,191)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Seashell4">
            <summary>
            X11 Color Seashell4 (139,134,130)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Antiquewhite1">
            <summary>
            X11 Color Antiquewhite1 (255,239,219)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Antiquewhite2">
            <summary>
            X11 Color Antiquewhite2 (238,223,204)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Antiquewhite3">
            <summary>
            X11 Color Antiquewhite3 (205,192,176)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Antiquewhite4">
            <summary>
            X11 Color Antiquewhite4 (139,131,120)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Bisque1">
            <summary>
            X11 Color Bisque1 (255,228,196)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Bisque2">
            <summary>
            X11 Color Bisque2 (238,213,183)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Bisque3">
            <summary>
            X11 Color Bisque3 (205,183,158)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Bisque4">
            <summary>
            X11 Color Bisque4 (139,125,107)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Peachpuff1">
            <summary>
            X11 Color Peachpuff1 (255,218,185)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Peachpuff2">
            <summary>
            X11 Color Peachpuff2 (238,203,173)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Peachpuff3">
            <summary>
            X11 Color Peachpuff3 (205,175,149)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Peachpuff4">
            <summary>
            X11 Color Peachpuff4 (139,119,101)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Navajowhite1">
            <summary>
            X11 Color Navajowhite1 (255,222,173)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Navajowhite2">
            <summary>
            X11 Color Navajowhite2 (238,207,161)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Navajowhite3">
            <summary>
            X11 Color Navajowhite3 (205,179,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Navajowhite4">
            <summary>
            X11 Color Navajowhite4 (139,121,94)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lemonchiffon1">
            <summary>
            X11 Color Lemonchiffon1 (255,250,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lemonchiffon2">
            <summary>
            X11 Color Lemonchiffon2 (238,233,191)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lemonchiffon3">
            <summary>
            X11 Color Lemonchiffon3 (205,201,165)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lemonchiffon4">
            <summary>
            X11 Color Lemonchiffon4 (139,137,112)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Cornsilk1">
            <summary>
            X11 Color Cornsilk1 (255,248,220)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Cornsilk2">
            <summary>
            X11 Color Cornsilk2 (238,232,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Cornsilk3">
            <summary>
            X11 Color Cornsilk3 (205,200,177)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Cornsilk4">
            <summary>
            X11 Color Cornsilk4 (139,136,120)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Ivory1">
            <summary>
            X11 Color Ivory1 (255,255,240)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Ivory2">
            <summary>
            X11 Color Ivory2 (238,238,224)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Ivory3">
            <summary>
            X11 Color Ivory3 (205,205,193)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Ivory4">
            <summary>
            X11 Color Ivory4 (139,139,131)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Honeydew1">
            <summary>
            X11 Color Honeydew1 (240,255,240)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Honeydew2">
            <summary>
            X11 Color Honeydew2 (224,238,224)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Honeydew3">
            <summary>
            X11 Color Honeydew3 (193,205,193)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Honeydew4">
            <summary>
            X11 Color Honeydew4 (131,139,131)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lavenderblush1">
            <summary>
            X11 Color Lavenderblush1 (255,240,245)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lavenderblush2">
            <summary>
            X11 Color Lavenderblush2 (238,224,229)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lavenderblush3">
            <summary>
            X11 Color Lavenderblush3 (205,193,197)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lavenderblush4">
            <summary>
            X11 Color Lavenderblush4 (139,131,134)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mistyrose1">
            <summary>
            X11 Color Mistyrose1 (255,228,225)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mistyrose2">
            <summary>
            X11 Color Mistyrose2 (238,213,210)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mistyrose3">
            <summary>
            X11 Color Mistyrose3 (205,183,181)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mistyrose4">
            <summary>
            X11 Color Mistyrose4 (139,125,123)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Azure1">
            <summary>
            X11 Color Azure1 (240,255,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Azure2">
            <summary>
            X11 Color Azure2 (224,238,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Azure3">
            <summary>
            X11 Color Azure3 (193,205,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Azure4">
            <summary>
            X11 Color Azure4 (131,139,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Slateblue1">
            <summary>
            X11 Color Slateblue1 (131,111,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Slateblue2">
            <summary>
            X11 Color Slateblue2 (122,103,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Slateblue3">
            <summary>
            X11 Color Slateblue3 (105,89,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Slateblue4">
            <summary>
            X11 Color Slateblue4 (71,60,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Royalblue1">
            <summary>
            X11 Color Royalblue1 (72,118,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Royalblue2">
            <summary>
            X11 Color Royalblue2 (67,110,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Royalblue3">
            <summary>
            X11 Color Royalblue3 (58,95,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Royalblue4">
            <summary>
            X11 Color Royalblue4 (39,64,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Blue1">
            <summary>
            X11 Color Blue1 (0,0,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Blue2">
            <summary>
            X11 Color Blue2 (0,0,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Blue3">
            <summary>
            X11 Color Blue3 (0,0,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Blue4">
            <summary>
            X11 Color Blue4 (0,0,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Dodgerblue1">
            <summary>
            X11 Color Dodgerblue1 (30,144,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Dodgerblue2">
            <summary>
            X11 Color Dodgerblue2 (28,134,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Dodgerblue3">
            <summary>
            X11 Color Dodgerblue3 (24,116,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Dodgerblue4">
            <summary>
            X11 Color Dodgerblue4 (16,78,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Steelblue1">
            <summary>
            X11 Color Steelblue1 (99,184,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Steelblue2">
            <summary>
            X11 Color Steelblue2 (92,172,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Steelblue3">
            <summary>
            X11 Color Steelblue3 (79,148,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Steelblue4">
            <summary>
            X11 Color Steelblue4 (54,100,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Deepskyblue1">
            <summary>
            X11 Color Deepskyblue1 (0,191,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Deepskyblue2">
            <summary>
            X11 Color Deepskyblue2 (0,178,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Deepskyblue3">
            <summary>
            X11 Color Deepskyblue3 (0,154,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Deepskyblue4">
            <summary>
            X11 Color Deepskyblue4 (0,104,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Skyblue1">
            <summary>
            X11 Color Skyblue1 (135,206,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Skyblue2">
            <summary>
            X11 Color Skyblue2 (126,192,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Skyblue3">
            <summary>
            X11 Color Skyblue3 (108,166,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Skyblue4">
            <summary>
            X11 Color Skyblue4 (74,112,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightskyblue1">
            <summary>
            X11 Color Lightskyblue1 (176,226,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightskyblue2">
            <summary>
            X11 Color Lightskyblue2 (164,211,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightskyblue3">
            <summary>
            X11 Color Lightskyblue3 (141,182,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightskyblue4">
            <summary>
            X11 Color Lightskyblue4 (96,123,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Slategray1">
            <summary>
            X11 Color Slategray1 (198,226,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Slategray2">
            <summary>
            X11 Color Slategray2 (185,211,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Slategray3">
            <summary>
            X11 Color Slategray3 (159,182,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Slategray4">
            <summary>
            X11 Color Slategray4 (108,123,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightsteelblue1">
            <summary>
            X11 Color Lightsteelblue1 (202,225,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightsteelblue2">
            <summary>
            X11 Color Lightsteelblue2 (188,210,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightsteelblue3">
            <summary>
            X11 Color Lightsteelblue3 (162,181,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightsteelblue4">
            <summary>
            X11 Color Lightsteelblue4 (110,123,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightblue1">
            <summary>
            X11 Color Lightblue1 (191,239,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightblue2">
            <summary>
            X11 Color Lightblue2 (178,223,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightblue3">
            <summary>
            X11 Color Lightblue3 (154,192,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightblue4">
            <summary>
            X11 Color Lightblue4 (104,131,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightcyan1">
            <summary>
            X11 Color Lightcyan1 (224,255,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightcyan2">
            <summary>
            X11 Color Lightcyan2 (209,238,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightcyan3">
            <summary>
            X11 Color Lightcyan3 (180,205,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightcyan4">
            <summary>
            X11 Color Lightcyan4 (122,139,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Paleturquoise1">
            <summary>
            X11 Color Paleturquoise1 (187,255,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Paleturquoise2">
            <summary>
            X11 Color Paleturquoise2 (174,238,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Paleturquoise3">
            <summary>
            X11 Color Paleturquoise3 (150,205,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Paleturquoise4">
            <summary>
            X11 Color Paleturquoise4 (102,139,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Cadetblue1">
            <summary>
            X11 Color Cadetblue1 (152,245,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Cadetblue2">
            <summary>
            X11 Color Cadetblue2 (142,229,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Cadetblue3">
            <summary>
            X11 Color Cadetblue3 (122,197,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Cadetblue4">
            <summary>
            X11 Color Cadetblue4 (83,134,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Turquoise1">
            <summary>
            X11 Color Turquoise1 (0,245,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Turquoise2">
            <summary>
            X11 Color Turquoise2 (0,229,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Turquoise3">
            <summary>
            X11 Color Turquoise3 (0,197,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Turquoise4">
            <summary>
            X11 Color Turquoise4 (0,134,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Cyan1">
            <summary>
            X11 Color Cyan1 (0,255,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Cyan2">
            <summary>
            X11 Color Cyan2 (0,238,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Cyan3">
            <summary>
            X11 Color Cyan3 (0,205,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Cyan4">
            <summary>
            X11 Color Cyan4 (0,139,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkslategray1">
            <summary>
            X11 Color Darkslategray1 (151,255,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkslategray2">
            <summary>
            X11 Color Darkslategray2 (141,238,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkslategray3">
            <summary>
            X11 Color Darkslategray3 (121,205,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkslategray4">
            <summary>
            X11 Color Darkslategray4 (82,139,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Aquamarine1">
            <summary>
            X11 Color Aquamarine1 (127,255,212)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Aquamarine2">
            <summary>
            X11 Color Aquamarine2 (118,238,198)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Aquamarine3">
            <summary>
            X11 Color Aquamarine3 (102,205,170)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Aquamarine4">
            <summary>
            X11 Color Aquamarine4 (69,139,116)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkseagreen1">
            <summary>
            X11 Color Darkseagreen1 (193,255,193)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkseagreen2">
            <summary>
            X11 Color Darkseagreen2 (180,238,180)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkseagreen3">
            <summary>
            X11 Color Darkseagreen3 (155,205,155)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkseagreen4">
            <summary>
            X11 Color Darkseagreen4 (105,139,105)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Seagreen1">
            <summary>
            X11 Color Seagreen1 (84,255,159)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Seagreen2">
            <summary>
            X11 Color Seagreen2 (78,238,148)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Seagreen3">
            <summary>
            X11 Color Seagreen3 (67,205,128)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Seagreen4">
            <summary>
            X11 Color Seagreen4 (46,139,87)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Palegreen1">
            <summary>
            X11 Color Palegreen1 (154,255,154)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Palegreen2">
            <summary>
            X11 Color Palegreen2 (144,238,144)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Palegreen3">
            <summary>
            X11 Color Palegreen3 (124,205,124)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Palegreen4">
            <summary>
            X11 Color Palegreen4 (84,139,84)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Springgreen1">
            <summary>
            X11 Color Springgreen1 (0,255,127)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Springgreen2">
            <summary>
            X11 Color Springgreen2 (0,238,118)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Springgreen3">
            <summary>
            X11 Color Springgreen3 (0,205,102)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Springgreen4">
            <summary>
            X11 Color Springgreen4 (0,139,69)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Green1">
            <summary>
            X11 Color Green1 (0,255,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Green2">
            <summary>
            X11 Color Green2 (0,238,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Green3">
            <summary>
            X11 Color Green3 (0,205,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Green4">
            <summary>
            X11 Color Green4 (0,139,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Chartreuse1">
            <summary>
            X11 Color Chartreuse1 (127,255,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Chartreuse2">
            <summary>
            X11 Color Chartreuse2 (118,238,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Chartreuse3">
            <summary>
            X11 Color Chartreuse3 (102,205,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Chartreuse4">
            <summary>
            X11 Color Chartreuse4 (69,139,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Olivedrab1">
            <summary>
            X11 Color Olivedrab1 (192,255,62)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Olivedrab2">
            <summary>
            X11 Color Olivedrab2 (179,238,58)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Olivedrab3">
            <summary>
            X11 Color Olivedrab3 (154,205,50)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Olivedrab4">
            <summary>
            X11 Color Olivedrab4 (105,139,34)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkolivegreen1">
            <summary>
            X11 Color Darkolivegreen1 (202,255,112)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkolivegreen2">
            <summary>
            X11 Color Darkolivegreen2 (188,238,104)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkolivegreen3">
            <summary>
            X11 Color Darkolivegreen3 (162,205,90)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkolivegreen4">
            <summary>
            X11 Color Darkolivegreen4 (110,139,61)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Khaki1">
            <summary>
            X11 Color Khaki1 (255,246,143)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Khaki2">
            <summary>
            X11 Color Khaki2 (238,230,133)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Khaki3">
            <summary>
            X11 Color Khaki3 (205,198,115)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Khaki4">
            <summary>
            X11 Color Khaki4 (139,134,78)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightgoldenrod1">
            <summary>
            X11 Color Lightgoldenrod1 (255,236,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightgoldenrod2">
            <summary>
            X11 Color Lightgoldenrod2 (238,220,130)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightgoldenrod3">
            <summary>
            X11 Color Lightgoldenrod3 (205,190,112)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightgoldenrod4">
            <summary>
            X11 Color Lightgoldenrod4 (139,129,76)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightyellow1">
            <summary>
            X11 Color Lightyellow1 (255,255,224)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightyellow2">
            <summary>
            X11 Color Lightyellow2 (238,238,209)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightyellow3">
            <summary>
            X11 Color Lightyellow3 (205,205,180)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightyellow4">
            <summary>
            X11 Color Lightyellow4 (139,139,122)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Yellow1">
            <summary>
            X11 Color Yellow1 (255,255,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Yellow2">
            <summary>
            X11 Color Yellow2 (238,238,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Yellow3">
            <summary>
            X11 Color Yellow3 (205,205,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Yellow4">
            <summary>
            X11 Color Yellow4 (139,139,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gold1">
            <summary>
            X11 Color Gold1 (255,215,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gold2">
            <summary>
            X11 Color Gold2 (238,201,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gold3">
            <summary>
            X11 Color Gold3 (205,173,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gold4">
            <summary>
            X11 Color Gold4 (139,117,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Goldenrod1">
            <summary>
            X11 Color Goldenrod1 (255,193,37)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Goldenrod2">
            <summary>
            X11 Color Goldenrod2 (238,180,34)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Goldenrod3">
            <summary>
            X11 Color Goldenrod3 (205,155,29)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Goldenrod4">
            <summary>
            X11 Color Goldenrod4 (139,105,20)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkgoldenrod1">
            <summary>
            X11 Color Darkgoldenrod1 (255,185,15)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkgoldenrod2">
            <summary>
            X11 Color Darkgoldenrod2 (238,173,14)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkgoldenrod3">
            <summary>
            X11 Color Darkgoldenrod3 (205,149,12)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkgoldenrod4">
            <summary>
            X11 Color Darkgoldenrod4 (139,101,8)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Rosybrown1">
            <summary>
            X11 Color Rosybrown1 (255,193,193)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Rosybrown2">
            <summary>
            X11 Color Rosybrown2 (238,180,180)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Rosybrown3">
            <summary>
            X11 Color Rosybrown3 (205,155,155)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Rosybrown4">
            <summary>
            X11 Color Rosybrown4 (139,105,105)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Indianred1">
            <summary>
            X11 Color Indianred1 (255,106,106)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Indianred2">
            <summary>
            X11 Color Indianred2 (238,99,99)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Indianred3">
            <summary>
            X11 Color Indianred3 (205,85,85)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Indianred4">
            <summary>
            X11 Color Indianred4 (139,58,58)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Sienna1">
            <summary>
            X11 Color Sienna1 (255,130,71)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Sienna2">
            <summary>
            X11 Color Sienna2 (238,121,66)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Sienna3">
            <summary>
            X11 Color Sienna3 (205,104,57)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Sienna4">
            <summary>
            X11 Color Sienna4 (139,71,38)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Burlywood1">
            <summary>
            X11 Color Burlywood1 (255,211,155)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Burlywood2">
            <summary>
            X11 Color Burlywood2 (238,197,145)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Burlywood3">
            <summary>
            X11 Color Burlywood3 (205,170,125)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Burlywood4">
            <summary>
            X11 Color Burlywood4 (139,115,85)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Wheat1">
            <summary>
            X11 Color Wheat1 (255,231,186)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Wheat2">
            <summary>
            X11 Color Wheat2 (238,216,174)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Wheat3">
            <summary>
            X11 Color Wheat3 (205,186,150)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Wheat4">
            <summary>
            X11 Color Wheat4 (139,126,102)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Tan1">
            <summary>
            X11 Color Tan1 (255,165,79)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Tan2">
            <summary>
            X11 Color Tan2 (238,154,73)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Tan3">
            <summary>
            X11 Color Tan3 (205,133,63)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Tan4">
            <summary>
            X11 Color Tan4 (139,90,43)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Chocolate1">
            <summary>
            X11 Color Chocolate1 (255,127,36)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Chocolate2">
            <summary>
            X11 Color Chocolate2 (238,118,33)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Chocolate3">
            <summary>
            X11 Color Chocolate3 (205,102,29)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Chocolate4">
            <summary>
            X11 Color Chocolate4 (139,69,19)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Firebrick1">
            <summary>
            X11 Color Firebrick1 (255,48,48)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Firebrick2">
            <summary>
            X11 Color Firebrick2 (238,44,44)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Firebrick3">
            <summary>
            X11 Color Firebrick3 (205,38,38)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Firebrick4">
            <summary>
            X11 Color Firebrick4 (139,26,26)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Brown1">
            <summary>
            X11 Color Brown1 (255,64,64)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Brown2">
            <summary>
            X11 Color Brown2 (238,59,59)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Brown3">
            <summary>
            X11 Color Brown3 (205,51,51)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Brown4">
            <summary>
            X11 Color Brown4 (139,35,35)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Salmon1">
            <summary>
            X11 Color Salmon1 (255,140,105)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Salmon2">
            <summary>
            X11 Color Salmon2 (238,130,98)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Salmon3">
            <summary>
            X11 Color Salmon3 (205,112,84)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Salmon4">
            <summary>
            X11 Color Salmon4 (139,76,57)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightsalmon1">
            <summary>
            X11 Color Lightsalmon1 (255,160,122)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightsalmon2">
            <summary>
            X11 Color Lightsalmon2 (238,149,114)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightsalmon3">
            <summary>
            X11 Color Lightsalmon3 (205,129,98)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightsalmon4">
            <summary>
            X11 Color Lightsalmon4 (139,87,66)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Orange1">
            <summary>
            X11 Color Orange1 (255,165,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Orange2">
            <summary>
            X11 Color Orange2 (238,154,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Orange3">
            <summary>
            X11 Color Orange3 (205,133,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Orange4">
            <summary>
            X11 Color Orange4 (139,90,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkorange1">
            <summary>
            X11 Color Darkorange1 (255,127,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkorange2">
            <summary>
            X11 Color Darkorange2 (238,118,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkorange3">
            <summary>
            X11 Color Darkorange3 (205,102,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkorange4">
            <summary>
            X11 Color Darkorange4 (139,69,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Coral1">
            <summary>
            X11 Color Coral1 (255,114,86)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Coral2">
            <summary>
            X11 Color Coral2 (238,106,80)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Coral3">
            <summary>
            X11 Color Coral3 (205,91,69)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Coral4">
            <summary>
            X11 Color Coral4 (139,62,47)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Tomato1">
            <summary>
            X11 Color Tomato1 (255,99,71)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Tomato2">
            <summary>
            X11 Color Tomato2 (238,92,66)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Tomato3">
            <summary>
            X11 Color Tomato3 (205,79,57)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Tomato4">
            <summary>
            X11 Color Tomato4 (139,54,38)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Orangered1">
            <summary>
            X11 Color Orangered1 (255,69,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Orangered2">
            <summary>
            X11 Color Orangered2 (238,64,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Orangered3">
            <summary>
            X11 Color Orangered3 (205,55,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Orangered4">
            <summary>
            X11 Color Orangered4 (139,37,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Red1">
            <summary>
            X11 Color Red1 (255,0,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Red2">
            <summary>
            X11 Color Red2 (238,0,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Red3">
            <summary>
            X11 Color Red3 (205,0,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Red4">
            <summary>
            X11 Color Red4 (139,0,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Deeppink1">
            <summary>
            X11 Color Deeppink1 (255,20,147)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Deeppink2">
            <summary>
            X11 Color Deeppink2 (238,18,137)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Deeppink3">
            <summary>
            X11 Color Deeppink3 (205,16,118)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Deeppink4">
            <summary>
            X11 Color Deeppink4 (139,10,80)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Hotpink1">
            <summary>
            X11 Color Hotpink1 (255,110,180)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Hotpink2">
            <summary>
            X11 Color Hotpink2 (238,106,167)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Hotpink3">
            <summary>
            X11 Color Hotpink3 (205,96,144)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Hotpink4">
            <summary>
            X11 Color Hotpink4 (139,58,98)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Pink1">
            <summary>
            X11 Color Pink1 (255,181,197)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Pink2">
            <summary>
            X11 Color Pink2 (238,169,184)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Pink3">
            <summary>
            X11 Color Pink3 (205,145,158)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Pink4">
            <summary>
            X11 Color Pink4 (139,99,108)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightpink1">
            <summary>
            X11 Color Lightpink1 (255,174,185)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightpink2">
            <summary>
            X11 Color Lightpink2 (238,162,173)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightpink3">
            <summary>
            X11 Color Lightpink3 (205,140,149)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightpink4">
            <summary>
            X11 Color Lightpink4 (139,95,101)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Palevioletred1">
            <summary>
            X11 Color Palevioletred1 (255,130,171)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Palevioletred2">
            <summary>
            X11 Color Palevioletred2 (238,121,159)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Palevioletred3">
            <summary>
            X11 Color Palevioletred3 (205,104,137)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Palevioletred4">
            <summary>
            X11 Color Palevioletred4 (139,71,93)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Maroon1">
            <summary>
            X11 Color Maroon1 (255,52,179)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Maroon2">
            <summary>
            X11 Color Maroon2 (238,48,167)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Maroon3">
            <summary>
            X11 Color Maroon3 (205,41,144)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Maroon4">
            <summary>
            X11 Color Maroon4 (139,28,98)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Violetred1">
            <summary>
            X11 Color Violetred1 (255,62,150)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Violetred2">
            <summary>
            X11 Color Violetred2 (238,58,140)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Violetred3">
            <summary>
            X11 Color Violetred3 (205,50,120)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Violetred4">
            <summary>
            X11 Color Violetred4 (139,34,82)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Magenta1">
            <summary>
            X11 Color Magenta1 (255,0,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Magenta2">
            <summary>
            X11 Color Magenta2 (238,0,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Magenta3">
            <summary>
            X11 Color Magenta3 (205,0,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Magenta4">
            <summary>
            X11 Color Magenta4 (139,0,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Orchid1">
            <summary>
            X11 Color Orchid1 (255,131,250)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Orchid2">
            <summary>
            X11 Color Orchid2 (238,122,233)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Orchid3">
            <summary>
            X11 Color Orchid3 (205,105,201)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Orchid4">
            <summary>
            X11 Color Orchid4 (139,71,137)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Plum1">
            <summary>
            X11 Color Plum1 (255,187,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Plum2">
            <summary>
            X11 Color Plum2 (238,174,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Plum3">
            <summary>
            X11 Color Plum3 (205,150,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Plum4">
            <summary>
            X11 Color Plum4 (139,102,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mediumorchid1">
            <summary>
            X11 Color Mediumorchid1 (224,102,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mediumorchid2">
            <summary>
            X11 Color Mediumorchid2 (209,95,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mediumorchid3">
            <summary>
            X11 Color Mediumorchid3 (180,82,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mediumorchid4">
            <summary>
            X11 Color Mediumorchid4 (122,55,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkorchid1">
            <summary>
            X11 Color Darkorchid1 (191,62,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkorchid2">
            <summary>
            X11 Color Darkorchid2 (178,58,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkorchid3">
            <summary>
            X11 Color Darkorchid3 (154,50,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkorchid4">
            <summary>
            X11 Color Darkorchid4 (104,34,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Purple1">
            <summary>
            X11 Color Purple1 (155,48,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Purple2">
            <summary>
            X11 Color Purple2 (145,44,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Purple3">
            <summary>
            X11 Color Purple3 (125,38,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Purple4">
            <summary>
            X11 Color Purple4 (85,26,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mediumpurple1">
            <summary>
            X11 Color Mediumpurple1 (171,130,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mediumpurple2">
            <summary>
            X11 Color Mediumpurple2 (159,121,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mediumpurple3">
            <summary>
            X11 Color Mediumpurple3 (137,104,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Mediumpurple4">
            <summary>
            X11 Color Mediumpurple4 (93,71,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Thistle1">
            <summary>
            X11 Color Thistle1 (255,225,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Thistle2">
            <summary>
            X11 Color Thistle2 (238,210,238)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Thistle3">
            <summary>
            X11 Color Thistle3 (205,181,205)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Thistle4">
            <summary>
            X11 Color Thistle4 (139,123,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray0">
            <summary>
            X11 Color Gray0 (0,0,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey0">
            <summary>
            X11 Color Grey0 (0,0,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray1">
            <summary>
            X11 Color Gray1 (3,3,3)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey1">
            <summary>
            X11 Color Grey1 (3,3,3)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray2">
            <summary>
            X11 Color Gray2 (5,5,5)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey2">
            <summary>
            X11 Color Grey2 (5,5,5)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray3">
            <summary>
            X11 Color Gray3 (8,8,8)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey3">
            <summary>
            X11 Color Grey3 (8,8,8)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray4">
            <summary>
            X11 Color Gray4 (10,10,10)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey4">
            <summary>
            X11 Color Grey4 (10,10,10)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray5">
            <summary>
            X11 Color Gray5 (13,13,13)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey5">
            <summary>
            X11 Color Grey5 (13,13,13)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray6">
            <summary>
            X11 Color Gray6 (15,15,15)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey6">
            <summary>
            X11 Color Grey6 (15,15,15)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray7">
            <summary>
            X11 Color Gray7 (18,18,18)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey7">
            <summary>
            X11 Color Grey7 (18,18,18)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray8">
            <summary>
            X11 Color Gray8 (20,20,20)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey8">
            <summary>
            X11 Color Grey8 (20,20,20)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray9">
            <summary>
            X11 Color Gray9 (23,23,23)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey9">
            <summary>
            X11 Color Grey9 (23,23,23)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray10">
            <summary>
            X11 Color Gray10 (26,26,26)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey10">
            <summary>
            X11 Color Grey10 (26,26,26)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray11">
            <summary>
            X11 Color Gray11 (28,28,28)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey11">
            <summary>
            X11 Color Grey11 (28,28,28)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray12">
            <summary>
            X11 Color Gray12 (31,31,31)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey12">
            <summary>
            X11 Color Grey12 (31,31,31)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray13">
            <summary>
            X11 Color Gray13 (33,33,33)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey13">
            <summary>
            X11 Color Grey13 (33,33,33)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray14">
            <summary>
            X11 Color Gray14 (36,36,36)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey14">
            <summary>
            X11 Color Grey14 (36,36,36)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray15">
            <summary>
            X11 Color Gray15 (38,38,38)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey15">
            <summary>
            X11 Color Grey15 (38,38,38)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray16">
            <summary>
            X11 Color Gray16 (41,41,41)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey16">
            <summary>
            X11 Color Grey16 (41,41,41)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray17">
            <summary>
            X11 Color Gray17 (43,43,43)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey17">
            <summary>
            X11 Color Grey17 (43,43,43)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray18">
            <summary>
            X11 Color Gray18 (46,46,46)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey18">
            <summary>
            X11 Color Grey18 (46,46,46)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray19">
            <summary>
            X11 Color Gray19 (48,48,48)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey19">
            <summary>
            X11 Color Grey19 (48,48,48)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray20">
            <summary>
            X11 Color Gray20 (51,51,51)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey20">
            <summary>
            X11 Color Grey20 (51,51,51)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray21">
            <summary>
            X11 Color Gray21 (54,54,54)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey21">
            <summary>
            X11 Color Grey21 (54,54,54)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray22">
            <summary>
            X11 Color Gray22 (56,56,56)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey22">
            <summary>
            X11 Color Grey22 (56,56,56)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray23">
            <summary>
            X11 Color Gray23 (59,59,59)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey23">
            <summary>
            X11 Color Grey23 (59,59,59)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray24">
            <summary>
            X11 Color Gray24 (61,61,61)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey24">
            <summary>
            X11 Color Grey24 (61,61,61)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray25">
            <summary>
            X11 Color Gray25 (64,64,64)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey25">
            <summary>
            X11 Color Grey25 (64,64,64)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray26">
            <summary>
            X11 Color Gray26 (66,66,66)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey26">
            <summary>
            X11 Color Grey26 (66,66,66)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray27">
            <summary>
            X11 Color Gray27 (69,69,69)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey27">
            <summary>
            X11 Color Grey27 (69,69,69)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray28">
            <summary>
            X11 Color Gray28 (71,71,71)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey28">
            <summary>
            X11 Color Grey28 (71,71,71)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray29">
            <summary>
            X11 Color Gray29 (74,74,74)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey29">
            <summary>
            X11 Color Grey29 (74,74,74)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray30">
            <summary>
            X11 Color Gray30 (77,77,77)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey30">
            <summary>
            X11 Color Grey30 (77,77,77)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray31">
            <summary>
            X11 Color Gray31 (79,79,79)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey31">
            <summary>
            X11 Color Grey31 (79,79,79)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray32">
            <summary>
            X11 Color Gray32 (82,82,82)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey32">
            <summary>
            X11 Color Grey32 (82,82,82)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray33">
            <summary>
            X11 Color Gray33 (84,84,84)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey33">
            <summary>
            X11 Color Grey33 (84,84,84)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray34">
            <summary>
            X11 Color Gray34 (87,87,87)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey34">
            <summary>
            X11 Color Grey34 (87,87,87)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray35">
            <summary>
            X11 Color Gray35 (89,89,89)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey35">
            <summary>
            X11 Color Grey35 (89,89,89)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray36">
            <summary>
            X11 Color Gray36 (92,92,92)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey36">
            <summary>
            X11 Color Grey36 (92,92,92)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray37">
            <summary>
            X11 Color Gray37 (94,94,94)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey37">
            <summary>
            X11 Color Grey37 (94,94,94)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray38">
            <summary>
            X11 Color Gray38 (97,97,97)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey38">
            <summary>
            X11 Color Grey38 (97,97,97)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray39">
            <summary>
            X11 Color Gray39 (99,99,99)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey39">
            <summary>
            X11 Color Grey39 (99,99,99)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray40">
            <summary>
            X11 Color Gray40 (102,102,102)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey40">
            <summary>
            X11 Color Grey40 (102,102,102)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray41">
            <summary>
            X11 Color Gray41 (105,105,105)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey41">
            <summary>
            X11 Color Grey41 (105,105,105)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray42">
            <summary>
            X11 Color Gray42 (107,107,107)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey42">
            <summary>
            X11 Color Grey42 (107,107,107)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray43">
            <summary>
            X11 Color Gray43 (110,110,110)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey43">
            <summary>
            X11 Color Grey43 (110,110,110)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray44">
            <summary>
            X11 Color Gray44 (112,112,112)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey44">
            <summary>
            X11 Color Grey44 (112,112,112)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray45">
            <summary>
            X11 Color Gray45 (115,115,115)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey45">
            <summary>
            X11 Color Grey45 (115,115,115)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray46">
            <summary>
            X11 Color Gray46 (117,117,117)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey46">
            <summary>
            X11 Color Grey46 (117,117,117)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray47">
            <summary>
            X11 Color Gray47 (120,120,120)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey47">
            <summary>
            X11 Color Grey47 (120,120,120)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray48">
            <summary>
            X11 Color Gray48 (122,122,122)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey48">
            <summary>
            X11 Color Grey48 (122,122,122)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray49">
            <summary>
            X11 Color Gray49 (125,125,125)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey49">
            <summary>
            X11 Color Grey49 (125,125,125)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray50">
            <summary>
            X11 Color Gray50 (127,127,127)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey50">
            <summary>
            X11 Color Grey50 (127,127,127)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray51">
            <summary>
            X11 Color Gray51 (130,130,130)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey51">
            <summary>
            X11 Color Grey51 (130,130,130)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray52">
            <summary>
            X11 Color Gray52 (133,133,133)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey52">
            <summary>
            X11 Color Grey52 (133,133,133)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray53">
            <summary>
            X11 Color Gray53 (135,135,135)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey53">
            <summary>
            X11 Color Grey53 (135,135,135)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray54">
            <summary>
            X11 Color Gray54 (138,138,138)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey54">
            <summary>
            X11 Color Grey54 (138,138,138)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray55">
            <summary>
            X11 Color Gray55 (140,140,140)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey55">
            <summary>
            X11 Color Grey55 (140,140,140)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray56">
            <summary>
            X11 Color Gray56 (143,143,143)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey56">
            <summary>
            X11 Color Grey56 (143,143,143)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray57">
            <summary>
            X11 Color Gray57 (145,145,145)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey57">
            <summary>
            X11 Color Grey57 (145,145,145)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray58">
            <summary>
            X11 Color Gray58 (148,148,148)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey58">
            <summary>
            X11 Color Grey58 (148,148,148)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray59">
            <summary>
            X11 Color Gray59 (150,150,150)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey59">
            <summary>
            X11 Color Grey59 (150,150,150)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray60">
            <summary>
            X11 Color Gray60 (153,153,153)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey60">
            <summary>
            X11 Color Grey60 (153,153,153)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray61">
            <summary>
            X11 Color Gray61 (156,156,156)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey61">
            <summary>
            X11 Color Grey61 (156,156,156)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray62">
            <summary>
            X11 Color Gray62 (158,158,158)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey62">
            <summary>
            X11 Color Grey62 (158,158,158)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray63">
            <summary>
            X11 Color Gray63 (161,161,161)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey63">
            <summary>
            X11 Color Grey63 (161,161,161)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray64">
            <summary>
            X11 Color Gray64 (163,163,163)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey64">
            <summary>
            X11 Color Grey64 (163,163,163)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray65">
            <summary>
            X11 Color Gray65 (166,166,166)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey65">
            <summary>
            X11 Color Grey65 (166,166,166)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray66">
            <summary>
            X11 Color Gray66 (168,168,168)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey66">
            <summary>
            X11 Color Grey66 (168,168,168)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray67">
            <summary>
            X11 Color Gray67 (171,171,171)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey67">
            <summary>
            X11 Color Grey67 (171,171,171)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray68">
            <summary>
            X11 Color Gray68 (173,173,173)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey68">
            <summary>
            X11 Color Grey68 (173,173,173)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray69">
            <summary>
            X11 Color Gray69 (176,176,176)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey69">
            <summary>
            X11 Color Grey69 (176,176,176)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray70">
            <summary>
            X11 Color Gray70 (179,179,179)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey70">
            <summary>
            X11 Color Grey70 (179,179,179)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray71">
            <summary>
            X11 Color Gray71 (181,181,181)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey71">
            <summary>
            X11 Color Grey71 (181,181,181)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray72">
            <summary>
            X11 Color Gray72 (184,184,184)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey72">
            <summary>
            X11 Color Grey72 (184,184,184)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray73">
            <summary>
            X11 Color Gray73 (186,186,186)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey73">
            <summary>
            X11 Color Grey73 (186,186,186)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray74">
            <summary>
            X11 Color Gray74 (189,189,189)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey74">
            <summary>
            X11 Color Grey74 (189,189,189)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray75">
            <summary>
            X11 Color Gray75 (191,191,191)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey75">
            <summary>
            X11 Color Grey75 (191,191,191)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray76">
            <summary>
            X11 Color Gray76 (194,194,194)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey76">
            <summary>
            X11 Color Grey76 (194,194,194)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray77">
            <summary>
            X11 Color Gray77 (196,196,196)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey77">
            <summary>
            X11 Color Grey77 (196,196,196)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray78">
            <summary>
            X11 Color Gray78 (199,199,199)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey78">
            <summary>
            X11 Color Grey78 (199,199,199)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray79">
            <summary>
            X11 Color Gray79 (201,201,201)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey79">
            <summary>
            X11 Color Grey79 (201,201,201)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray80">
            <summary>
            X11 Color Gray80 (204,204,204)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey80">
            <summary>
            X11 Color Grey80 (204,204,204)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray81">
            <summary>
            X11 Color Gray81 (207,207,207)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey81">
            <summary>
            X11 Color Grey81 (207,207,207)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray82">
            <summary>
            X11 Color Gray82 (209,209,209)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey82">
            <summary>
            X11 Color Grey82 (209,209,209)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray83">
            <summary>
            X11 Color Gray83 (212,212,212)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey83">
            <summary>
            X11 Color Grey83 (212,212,212)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray84">
            <summary>
            X11 Color Gray84 (214,214,214)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey84">
            <summary>
            X11 Color Grey84 (214,214,214)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray85">
            <summary>
            X11 Color Gray85 (217,217,217)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey85">
            <summary>
            X11 Color Grey85 (217,217,217)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray86">
            <summary>
            X11 Color Gray86 (219,219,219)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey86">
            <summary>
            X11 Color Grey86 (219,219,219)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray87">
            <summary>
            X11 Color Gray87 (222,222,222)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey87">
            <summary>
            X11 Color Grey87 (222,222,222)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray88">
            <summary>
            X11 Color Gray88 (224,224,224)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey88">
            <summary>
            X11 Color Grey88 (224,224,224)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray89">
            <summary>
            X11 Color Gray89 (227,227,227)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey89">
            <summary>
            X11 Color Grey89 (227,227,227)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray90">
            <summary>
            X11 Color Gray90 (229,229,229)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey90">
            <summary>
            X11 Color Grey90 (229,229,229)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray91">
            <summary>
            X11 Color Gray91 (232,232,232)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey91">
            <summary>
            X11 Color Grey91 (232,232,232)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray92">
            <summary>
            X11 Color Gray92 (235,235,235)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey92">
            <summary>
            X11 Color Grey92 (235,235,235)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray93">
            <summary>
            X11 Color Gray93 (237,237,237)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey93">
            <summary>
            X11 Color Grey93 (237,237,237)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray94">
            <summary>
            X11 Color Gray94 (240,240,240)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey94">
            <summary>
            X11 Color Grey94 (240,240,240)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray95">
            <summary>
            X11 Color Gray95 (242,242,242)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey95">
            <summary>
            X11 Color Grey95 (242,242,242)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray96">
            <summary>
            X11 Color Gray96 (245,245,245)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey96">
            <summary>
            X11 Color Grey96 (245,245,245)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray97">
            <summary>
            X11 Color Gray97 (247,247,247)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey97">
            <summary>
            X11 Color Grey97 (247,247,247)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray98">
            <summary>
            X11 Color Gray98 (250,250,250)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey98">
            <summary>
            X11 Color Grey98 (250,250,250)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray99">
            <summary>
            X11 Color Gray99 (252,252,252)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey99">
            <summary>
            X11 Color Grey99 (252,252,252)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Gray100">
            <summary>
            X11 Color Gray100 (255,255,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Grey100">
            <summary>
            X11 Color Grey100 (255,255,255)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkgrey">
            <summary>
            X11 Color Darkgrey (169,169,169)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkgray">
            <summary>
            X11 Color Darkgray (169,169,169)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkblue">
            <summary>
            X11 Color Darkblue (0,0,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkcyan">
            <summary>
            X11 Color Darkcyan (0,139,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkmagenta">
            <summary>
            X11 Color Darkmagenta (139,0,139)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Darkred">
            <summary>
            X11 Color Darkred (139,0,0)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ColorValue.Lightgreen">
            <summary>
            X11 Color Lightgreen (144,238,144)
            </summary>
        </member>
        <member name="T:CANAPE.Utils.CountedStream">
            <summary>
            A stream class which counts how many bytes have been read
            </summary>
        </member>
        <member name="M:CANAPE.Utils.CountedStream.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="stm">The stream to wrap</param>
        </member>
        <member name="P:CANAPE.Utils.CountedStream.CanRead">
            <summary>
            Can the stream be read
            </summary>
        </member>
        <member name="P:CANAPE.Utils.CountedStream.CanSeek">
            <summary>
            Can the stream seek
            </summary>
        </member>
        <member name="P:CANAPE.Utils.CountedStream.CanWrite">
            <summary>
            Can the stream be written to
            </summary>
        </member>
        <member name="M:CANAPE.Utils.CountedStream.Flush">
            <summary>
            Flush stream
            </summary>
        </member>
        <member name="P:CANAPE.Utils.CountedStream.Length">
            <summary>
            Get stream length
            </summary>
        </member>
        <member name="P:CANAPE.Utils.CountedStream.Position">
            <summary>
            Get or set stream position
            </summary>
        </member>
        <member name="M:CANAPE.Utils.CountedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from stream
            </summary>
            <param name="buffer">The buffer to read into</param>
            <param name="offset">The offset into the buffer</param>
            <param name="count">The number of bytes</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:CANAPE.Utils.CountedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek in the stream
            </summary>
            <param name="offset">The seek offset</param>
            <param name="origin">The seek origin</param>
            <returns>The current position</returns>
        </member>
        <member name="M:CANAPE.Utils.CountedStream.SetLength(System.Int64)">
            <summary>
            Set length of stream
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:CANAPE.Utils.CountedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream
            </summary>
            <param name="buffer">The buffer to write</param>
            <param name="offset">The offset into the buffer</param>
            <param name="count">The number of bytes to write</param>
        </member>
        <member name="M:CANAPE.Utils.CountedStream.ReadByte">
            <summary>
            Read a byte from the stream
            </summary>
            <returns>The byte, -1 on end of stream</returns>
        </member>
        <member name="M:CANAPE.Utils.CountedStream.WriteByte(System.Byte)">
            <summary>
            Write a byte to the stream
            </summary>
            <param name="value">The byte to write</param>
        </member>
        <member name="P:CANAPE.Utils.CountedStream.BytesRead">
            <summary>
            Get or set the number of bytes read
            </summary>
        </member>
        <member name="P:CANAPE.Utils.CountedStream.BytesWritten">
            <summary>
            Get or set the number of bytes written
            </summary>
        </member>
        <member name="T:CANAPE.Utils.DataReader">
            <summary>
            Class to enclose a standard stream
            and provide simple mechanisms to read and write arrays and 
            python compatible strings
            </summary>    
        </member>
        <member name="M:CANAPE.Utils.DataReader.#ctor(System.IO.Stream)">
            <summary>
            Default constructor
            </summary>
            <param name="stm"></param>        
        </member>
        <member name="M:CANAPE.Utils.DataReader.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="data">Byte data to read</param>
        </member>
        <member name="M:CANAPE.Utils.DataReader.#ctor(CANAPE.DataAdapters.IDataAdapter)">
            <summary>
            Constructor
            </summary>
            <param name="adapter">A data adapter to wrap</param>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadBytes(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Read bytes waiting for all options and throwing options
            </summary>
            <param name="len">The length to read</param>
            <param name="waitForAll">Whether to wait for all the data to be read, if cannot read number of bytes throw an exception</param>
            <param name="throwOnEof">If true then throws at EOF during process, also if waitForAll if this is false it will return the final short read</param>
            <returns>An array of bytes, up to length depending on mode</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadBytes(System.Int32,System.Boolean)">
            <summary>
            Read bytes from the stream, up to a maximum of the length, and empty array indicates 
            end of stream
            </summary>
            <param name="len">The maximum length to read</param>
            <param name="waitForAll">Whether to wait for all the bytes to arrive</param>
            <exception cref="T:System.IO.EndOfStreamException">Throws exception if waitForAll is true but not all data could be read</exception>
            <returns>An array up to len bytes long</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadBytes(System.Int32)">
            <summary>
            Read bytes from the stream, up to a maximum of the length, and empty array indicates 
            end of stream. Wait for all data to arrive
            </summary>
            <param name="len">The maximum length to read</param>        
            <returns>An array up to len bytes long, empty array on end of stream</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadToEnd">
            <summary>
            Read all data till the end of the stream
            </summary>
            <returns>The bytes to the end of the stream</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadToEnd(System.Int32)">
            <summary>
            Read all data till end of the stream, or until chunksize is reached
            </summary>
            <param name="chunkSize">The size of the chunk to read</param>
            <returns>The data read</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadToEnd(System.Text.Encoding)">
            <summary>
            Read to end of stream as a string
            </summary>
            <param name="encoding">The encoding to use</param>
            <returns>The string</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadToEndTrail(System.Int32)">
            <summary>
            Read almost to the end, leaving a trailing amount of bytes in the reader
            </summary>
            <remarks>Note this might change the reader's stream if it doesn't support seeking</remarks>        
            <param name="trail">The number of trailing characters or bytes</param>        
            <returns>The read bytes</returns>        
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadToEndTrail(System.Text.Encoding,System.Int32)">
            <summary>
            Read almost to the end, leaving a trailing amount of characters in the reader
            </summary>
            <remarks>Note this might change the reader's stream if it doesn't support seeking</remarks>
            <param name="encoding">The string encoding to use</param>
            <param name="trail">The number of trailing characters or bytes</param>        
            <returns>The read string</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadChar(System.Text.Encoding)">
            <summary>
            Read a character from the stream using a specified byte encoding
            </summary>
            <param name="encoding">The encoding</param>
            <exception cref="T:System.InvalidOperationException">Could not read a character from the stream</exception>
            <returns>The character read</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadChar">
            <summary>
            Read a character from the stream using a binary encoding
            </summary>
            <returns>The byte as a character</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadString(System.Int32,System.Boolean,System.Text.Encoding)">
            <summary>
            Read a string from the stream using a specified encoding
            </summary>
            <param name="len">Maximum length to read (in chars)</param>
            <param name="waitForAll">Whether to wait for all the chars to arrive</param>
            <param name="encoding">The encoding to use</param>
            <returns>The read string</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadString(System.Int32,System.Boolean)">
            <summary>
            Read a string from the stream using a specified encoding
            </summary>
            <param name="len">Maximum length to read (in chars)</param>
            <param name="waitForAll">Whether to wait for all the chars to arrive</param>
            <returns>The read string</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadString(System.Int32)">
            <summary>
            Read a string from the stream. Wait for all data to arrive
            </summary>
            <param name="len">Maximum length to read</param>
            <returns>The python style string</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadTerminatedString(System.Char)">
            <summary>
            Read a string from the stream with a terminating character
            </summary>
            <param name="term">The terminating character</param>
            <exception cref="T:System.IO.EndOfStreamException">Thrown if end of stream reached before reading terminator</exception>
            <returns>The string read from the stream (without the terminator)</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadTerminatedString(System.Text.Encoding,System.Char)">
            <summary>
            Read a string from the stream with a terminating character
            </summary>
            <param name="encoding">The character encoding to use</param>
            <param name="term">The terminating character</param>
            <exception cref="T:System.IO.EndOfStreamException">Thrown if end of stream reached before reading terminator</exception>
            <returns>The string read from the stream (without the terminator)</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadNulTerminatedString(System.Text.Encoding)">
            <summary>
            Read a NUL terminated string from the stream
            </summary>
            <param name="encoding">The character encoding to use</param>
            <exception cref="T:System.IO.EndOfStreamException">Thrown if end of stream reached before reading terminator</exception>
            <returns>The nul terminated string (without the terminator)</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadNulTerminatedString">
            <summary>
            Read a NUL terminated string from the stream with binary encoding
            </summary>
            <exception cref="T:System.IO.EndOfStreamException">Thrown if end of stream reached before reading terminator</exception>
            <returns>The nul terminated string (without the terminator)</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadLine">
            <summary>
            Read a ASCII python compatible string from the stream with LF line ending
            </summary>
            <returns>The string, empty string on end of stream</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadLine(CANAPE.Utils.TextLineEnding)">
            <summary>
            Read a ASCII python compatible string from the stream with a specified line ending
            </summary>
            <param name="lineEnding">The line ending</param>
            <returns>The string, empty string on end of stream</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadLine(System.Text.Encoding)">
            <summary>
            Read an encoded line of text from the stream, with LF line ending
            </summary>
            <param name="encoding">The text encoding to use</param>        
            <returns>The string, empty string on end of stream</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadLine(System.Text.Encoding,CANAPE.Utils.TextLineEnding)">
            <summary>
            Read an encoded line of text from the stream, with a specified line ending
            </summary>
            <param name="encoding">The text encoding to use</param>
            <param name="lineEnding">Specify the line ending required for the line</param>        
            <returns>The string, empty string on end of stream</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadLine(System.Text.Encoding,CANAPE.Utils.TextLineEnding,System.Int32,System.Boolean)">
            <summary>
            Read an encoded line of text from the stream, with a specified line ending
            </summary>
            <param name="encoding">The text encoding to use</param>
            <param name="lineEnding">Specify the line ending required for the line</param>
            <param name="maxLength">Maximum length of a line, &lt;= 0 indicates to end of string</param>
            <param name="throwOnEof">If true throws EndOfStream on EoF otherwise returns an empty string</param>
            <returns>The string, empty string on end of stream</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadByte">
            <summary>
            Read a byte from the stream
            </summary>
            <exception cref="T:System.IO.EndOfStreamException">Throw on end of stream</exception>
            <returns>The byte read</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.Flush">
            <summary>
            Flush out any pending bits
            </summary>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadInt7V">
            <summary>
            Read a 7 bit encoded integer from the stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadSByte">
            <summary>
            Read a signed byte from the stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadInt16(System.Boolean)">
            <summary>
            Read a short from the stream with a specified endian
            </summary>
            <param name="littleEndian">True for little endian, false for big endian</param>
            <exception cref="T:System.IO.EndOfStreamException">Throw on end of stream</exception>
            <returns>The read value</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadInt16">
            <summary>
            Read a big endian short from the stream
            </summary>
            <exception cref="T:System.IO.EndOfStreamException">Throw on end of stream</exception>
            <returns>The read value</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadUInt16(System.Boolean)">
            <summary>
            Read an unsigned short from the stream with a specified endian
            </summary>
            <param name="littleEndian">True for little endian, false for big endian</param>
            <returns>The read value</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadUInt16">
            <summary>
            Read a big endian unsigned short from the stream
            </summary>        
            <returns>The read value</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadInt32(System.Boolean)">
            <summary>
            Read an integer from the stream with a specified endian
            </summary>
            <param name="littleEndian">True for little endian, false for big endian</param>
            <returns>The read value</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadInt32">
            <summary>
            Read a big endian integer from the stream
            </summary>
            <returns>The read value</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadUInt32(System.Boolean)">
            <summary>
            Read an unsigned integer from the stream with a specified endian
            </summary>
            <param name="littleEndian">True for little endian, false for big endian</param>
            <returns>The read value</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadUInt32">
            <summary>
            Read a big endian unsigned integer from the stream
            </summary>
            <returns>The read value</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadUInt64(System.Boolean)">
            <summary>
            Read an unsigned long from the stream with a specified endian
            </summary>
            <param name="littleEndian">True for little endian, false for big endian</param>
            <returns>The read value</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadUInt64">
            <summary>
            Read a big endian unsigned long from the stream
            </summary>
            <returns>The read value</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadInt64(System.Boolean)">
            <summary>
            Read a long from the stream with a specified endian
            </summary>
            <param name="littleEndian">True for little endian, false for big endian</param>
            <returns>The read value</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadInt64">
            <summary>
            Read a big endian long from the stream
            </summary>
            <returns>The read value</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadInt24(System.Boolean)">
            <summary>
            Read a 24bit integer from the stream with a specified endian
            </summary>
            <param name="littleEndian">True for little endian, false for big endian</param>
            <returns>The 24bit integer</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadUInt24(System.Boolean)">
            <summary>
            Read a 24bit integer from the stream with a specified endian
            </summary>
            <param name="littleEndian">True for little endian, false for big endian</param>
            <returns>The 24bit unsigned integer</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadInt24">
            <summary>
            Read a big endian 24bit integer from the stream
            </summary>        
            <returns>The 24bit integer</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadUInt24">
            <summary>
            Read a big endian 24bit integer from the stream 
            </summary>        
            <returns>The 24bit unsigned integer</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadFloat">
            <summary>
            Read a big endian float from the stream
            </summary>
            <returns>The float</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadFloat(System.Boolean)">
            <summary>
            Read a float from the stream with a specified endian
            </summary>
            <param name="littleEndian">True for little endian, false for big endian</param>
            <returns>The float</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadDouble">
            <summary>
            Read a big endian double from the stream
            </summary>
            <returns>The double</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadDouble(System.Boolean)">
            <summary>
            Read a double from the stream with a specified endian
            </summary>
            <param name="littleEndian">True for little endian, false for big endian</param>
            <returns>The double</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadPrimitive``1(System.Boolean)">
            <summary>
            Read a primitive type
            </summary>
            <typeparam name="T">The primitive type to read</typeparam>
            <param name="littleEndian">Whether should read in little endian (if applicable)</param>
            <exception cref="T:System.ArgumentException">Throw if cannot determine type to read</exception>
            <returns>The primitive type</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadPrimitive(System.Type,System.Boolean)">
            <summary>
            Read a primitive type
            </summary>        
            <param name="t">The primitive type to read</param>
            <param name="littleEndian">Whether should read in little endian (if applicable)</param>
            <exception cref="T:System.ArgumentException">Throw if cannot determine type to read</exception>
            <returns>The primitive type</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.GetStream">
            <summary>
            Get the underlying stream object
            </summary>
            <returns>The stream object</returns>
        </member>
        <member name="P:CANAPE.Utils.DataReader.DataLeft">
            <summary>
            Gets the number of bytes left in the stream, -1 if not supported
            </summary>        
        </member>
        <member name="P:CANAPE.Utils.DataReader.Eof">
            <summary>
            Get indication of end of file
            </summary>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadBits(System.Int32,System.Boolean)">
            <summary>
            Read a specified number of bits from the stream
            </summary>
            <param name="count">The count of bits, should be between 0 and 64</param>
            <param name="littleEndian">Whether the bits are read out little endian, in little endian bits are read starting with LSB, in big endian they read from MSB</param>
            <returns>The read bits</returns>
        </member>
        <member name="M:CANAPE.Utils.DataReader.ReadBits(System.Int32)">
            <summary>
            Read a specified number of big endian bits from the stream
            </summary>
            <param name="count">The count of bits, should be between 0 and 64</param>        
            <returns>The read bits</returns>
        </member>
        <member name="P:CANAPE.Utils.DataReader.ByteCount">
            <summary>
            Specifies how many bytes have been read since the last time the state was cleared
            </summary>
        </member>
        <member name="T:CANAPE.Utils.DataWriter">
            <summary>
            Class to write output to a data stream
            </summary>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.#ctor(System.IO.Stream)">
            <summary>
            Default constructor
            </summary>
            <param name="stm"></param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.#ctor">
            <summary>
            Constructor, creates a writer with an inbuilt memorystream
            </summary>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.#ctor(CANAPE.DataAdapters.IDataAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:CANAPE.Utils.DataWriter"/> class.
            </summary>
            <param name="adapter">The data adapter</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteBytes(System.Byte[])">
            <summary>
            Write an array to stream
            </summary>
            <param name="arr">Array of bytes to write</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteSBytes(System.SByte[])">
            <summary>
            Write an array of signed bytes
            </summary>
            <param name="arr">The array to write</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write an array to stream
            </summary>
            <param name="arr">Array of bytes to write</param>
            <param name="pos">Position in the array to start write</param>
            <param name="length">Length of write</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteByte(System.Byte)">
            <summary>
            Write a byte to the stream
            </summary>
            <param name="b">The byte to write</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteSByte(System.SByte)">
            <summary>
            Write a signed byte to the stream
            </summary>
            <param name="sb">The signed byte to write</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteInt16(System.Int16,System.Boolean)">
            <summary>
            Write a 16bit integer to the stream
            </summary>
            <param name="s">The integer to write</param>
            <param name="littleEndian">True for little endian, otherwise big endian</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteInt16(System.Int16)">
            <summary>
            Write a big endian 16bit integer to the stream
            </summary>
            <param name="s">The integer to write</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteInt32(System.Int32,System.Boolean)">
            <summary>
            Write a 32bit integer to the stream
            </summary>
            <param name="i">The integer to write</param>
            <param name="littleEndian">True for little endian, otherwise big endian</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteInt32(System.Int32)">
            <summary>
            Write a big endian 32bit integer to the stream
            </summary>
            <param name="i">The integer to write</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteInt64(System.Int64,System.Boolean)">
            <summary>
            Write a 64bit integer to the stream
            </summary>
            <param name="l">The integer to write</param>
            <param name="littleEndian">True for little endian, otherwise big endian</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteInt64(System.Int64)">
            <summary>
            Write a big endian 64bit integer to the stream
            </summary>
            <param name="l">The integer to write</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteUInt16(System.UInt16,System.Boolean)">
            <summary>
            Write a 16bit integer to the stream
            </summary>
            <param name="s">The integer to write</param>
            <param name="littleEndian">True for little endian, otherwise big endian</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteUInt16(System.UInt16)">
            <summary>
            Write a big endian 16bit integer to the stream
            </summary>
            <param name="s">The integer to write</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteUInt32(System.UInt32,System.Boolean)">
            <summary>
            Write an unsigned 32bit integer with a specified endian
            </summary>
            <param name="i">The integer to write</param>
            <param name="littleEndian">True for little endian, otherwise big endian</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteUInt32(System.UInt32)">
            <summary>
            Write a big endian unsigned 32bit integer
            </summary>
            <param name="i">The integer to write</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteUInt64(System.UInt64,System.Boolean)">
            <summary>
            Write an unsigned 64bit integer with a specified endian
            </summary>
            <param name="l">The integer to write</param>
            <param name="littleEndian">True for little endian, otherwise big endian</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteUInt64(System.UInt64)">
            <summary>
            Write a big endian unsigned 64bit integer
            </summary>
            <param name="l">The integer to write</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteInt24(CANAPE.Utils.Int24,System.Boolean)">
            <summary>
            Write a 24 bit integer
            </summary>
            <param name="i">The integer to write</param>
            <param name="littleEndian">True for little endian, otherwise big endian</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteUInt24(CANAPE.Utils.UInt24,System.Boolean)">
            <summary>
            Write a 24bit unsigned integer
            </summary>
            <param name="i">The integer to write</param>
            <param name="littleEndian">True for little endian, otherwise big endian</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteInt24(CANAPE.Utils.Int24)">
            <summary>
            Write a big endian 24bit integer
            </summary>
            <param name="i">The integer to write</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteUInt24(CANAPE.Utils.UInt24)">
            <summary>
            Write a big endian 24bit unsigned integer
            </summary>
            <param name="i">The integer to write</param>        
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteInt24(System.Int32,System.Boolean)">
            <summary>
            Write a 24 bit integer
            </summary>
            <param name="i">The integer to write</param>
            <param name="littleEndian">True for little endian, otherwise big endian</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteUInt24(System.UInt32,System.Boolean)">
            <summary>
            Write a 24bit unsigned integer
            </summary>
            <param name="i">The integer to write</param>
            <param name="littleEndian">True for little endian, otherwise big endian</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteInt24(System.Int32)">
            <summary>
            Write a big endian 24bit integer
            </summary>
            <param name="i">The integer to write</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteUInt24(System.UInt32)">
            <summary>
            Write a big endian 24bit unsigned integer
            </summary>
            <param name="i">The integer to write</param>        
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteFloat(System.Single)">
            <summary>
            Write a big endian float
            </summary>
            <param name="f">The float to write</param>    
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteFloat(System.Single,System.Boolean)">
            <summary>
            Write a float with a specified endian
            </summary>
            <param name="f">The float to write</param>
            <param name="littleEndian">True for little endian, otherwise big endian</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteDouble(System.Double)">
            <summary>
            Write a big endian double
            </summary>
            <param name="d">The double to write</param>    
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteDouble(System.Double,System.Boolean)">
            <summary>
            Write a double with a specified endian
            </summary>
            <param name="d">The double to write</param>
            <param name="littleEndian">True for little endian, otherwise big endian</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteString(System.String,System.Text.Encoding)">
            <summary>
            Write a string with a specific encoding
            </summary>
            <param name="str">The string to write</param>
            <param name="encoding">The encoding to use</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteString(System.String,CANAPE.Utils.BinaryStringEncoding)">
            <summary>
            Write a string with a specific encoding
            </summary>
            <param name="str">The string to write</param>
            <param name="encoding">The encoding to use</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteString(System.String)">
            <summary>
            Write string to stream with a binary encoding
            </summary>
            <param name="str">The binary encoded string</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteChar(System.Char)">
            <summary>
            Write a character with binary encoding
            </summary>
            <param name="ch">The character</param>
            <remarks>Will remove the top 8 bits from the character</remarks>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteChar(System.Char,System.Text.Encoding)">
            <summary>
            Write a character with a specified encoding
            </summary>
            <param name="ch">The character</param>
            <param name="encoding">The encoding</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteChar(System.Char,CANAPE.Utils.BinaryStringEncoding)">
            <summary>
            Write a character with a specified encoding
            </summary>
            <param name="ch">The character</param>
            <param name="encoding">The encoding</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteLine(System.String,System.Text.Encoding,CANAPE.Utils.TextLineEnding)">
            <summary>
            Write a line to the stream using a specified encoding and line ending
            </summary>
            <param name="line">The line to write</param>
            <param name="encoding">The encoding to use</param>
            <param name="lineEnding">The type of line ending</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteLine(System.String)">
            <summary>
            Write a line to the stream using binary encoding and LF line ending
            </summary>
            <param name="line">The line to write</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteLine(System.String,System.Text.Encoding)">
            <summary>
            Write a line to the stream using a specified encoding and LF line ending
            </summary>
            <param name="line">The line to write</param>
            <param name="encoding">The encoding to use</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteLine(System.String,CANAPE.Utils.BinaryStringEncoding)">
            <summary>
            Write a line to the stream using a specified encoding and LF line ending
            </summary>
            <param name="line">The line to write</param>
            <param name="encoding">The encoding to use</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteLine(System.String,CANAPE.Utils.TextLineEnding)">
            <summary>
            Write a line to the stream using a binary encoding and a specified line ending
            </summary>
            <param name="line">The line to write</param>
            <param name="lineEnding">The type of line ending</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteInt7V(System.UInt64)">
            <summary>
            Write a 7 bit integer to the stream
            </summary>
            <param name="i">The integer to write</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteBits(System.UInt64,System.Int32,System.Boolean)">
            <summary>
            Write a bit field to the stream
            </summary>
            <param name="val">The value containing the bits</param>
            <param name="count">The number of bits to write from 0 to 64</param>
            <param name="littleEndian">True to write in little endian, otherwise big endian</param>
            <remarks>When you have finished writing bits you should either write another value, 
            write multiples of 8 bits or call Flush to ensure any remaining bits are written to the stream</remarks>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteBits(System.UInt64,System.Int32)">
            <summary>
            Write a big endian bit field to the stream
            </summary>
            <param name="val">The value containing the bits</param>
            <param name="count">The number of bits to write from 0 to 64</param>
            <remarks>When you have finished writing bits you should either write another value, 
            write multiples of 8 bits or call FlushBits to ensure any remaining bits are written to the stream</remarks>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteTerminatedString(System.String,System.Text.Encoding,System.Char)">
            <summary>
            Write a terminated string to the stream
            </summary>
            <param name="str">The string to write</param>
            <param name="encoding">The encoding to use</param>
            <param name="terminator">The terminator</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteTerminatedString(System.String,CANAPE.Utils.BinaryStringEncoding,System.Char)">
            <summary>
            Write a terminated string to the stream
            </summary>
            <param name="str">The string to write</param>
            <param name="encoding">The encoding to use</param>
            <param name="terminator">The terminator</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteTerminatedString(System.String,System.Char)">
            <summary>
            Write a binary encoded terminated string to the stream
            </summary>
            <param name="str">The string to write</param>
            <param name="terminator">The terminator</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteNulTerminatedString(System.String,System.Text.Encoding)">
            <summary>
            Write a NUL terminated string to the stream with a specified encoding
            </summary>
            <param name="str">The string to write</param>
            <param name="encoding">The encoding to use</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteNulTerminatedString(System.String,CANAPE.Utils.BinaryStringEncoding)">
            <summary>
            Write a NUL terminated string to the stream with a specified encoding
            </summary>
            <param name="str">The string to write</param>
            <param name="encoding">The encoding to use</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WriteNulTerminatedString(System.String)">
            <summary>
            Write a NUL terminated string to the stream with a binary encoding
            </summary>
            <param name="str">The string to write</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WritePrimitive(CANAPE.Utils.IPrimitiveValue,System.Boolean)">
            <summary>
            Write a primitive value
            </summary>
            <param name="ser">The primitive value</param>
            <param name="littleEndian">True for little endian</param>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WritePrimitive(CANAPE.Utils.IPrimitiveValue)">
            <summary>
            Write a primitive value in little endian
            </summary>
            <param name="ser">The primitive value</param>        
        </member>
        <member name="M:CANAPE.Utils.DataWriter.Flush">
            <summary>
            Method to flush any pending data (only used for bit values atm)
            </summary>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.GetStream">
            <summary>
            Get the underlying stream object
            </summary>
            <returns>The stream object</returns>
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WritePrimitive``1(``0,System.Boolean)">
            <summary>
            Write a primitive type
            </summary>        
            <typeparam name="T">The primitive type to write</typeparam>   
            <param name="value">The value to write</param>
            <param name="littleEndian">Whether should write in little endian (if applicable)</param>
            <exception cref="T:System.ArgumentException">Throw if cannot determine type to write</exception>    
        </member>
        <member name="M:CANAPE.Utils.DataWriter.WritePrimitive(System.Object,System.Type,System.Boolean)">
            <summary>
            Write a primitive type
            </summary>        
            <param name="value">The value to write</param>
            <param name="t">The type of valie</param>
            <param name="littleEndian">Whether should write in little endian (if applicable)</param>
            <exception cref="T:System.ArgumentException">Throw if cannot determine type to write</exception>        
        </member>
        <member name="P:CANAPE.Utils.DataWriter.BytesWritten">
            <summary>
            Get or set count of bytes written
            </summary>
        </member>
        <member name="T:CANAPE.Utils.Diff">
            <summary>
            This Class implements the Difference Algorithm published in
            "An O(ND) Difference Algorithm and its Variations" by Eugene Myers
            Algorithmica Vol. 1 No. 2, 1986, p 251.  
            
            There are many C, Java, Lisp implementations public available but they all seem to come
            from the same source (diffutils) that is under the (unfree) GNU public License
            and cannot be reused as a sourcecode for a commercial application.
            There are very old C implementations that use other (worse) algorithms.
            Microsoft also published sourcecode of a diff-tool (windiff) that uses some tree data.
            Also, a direct transfer from a C source to C# is not easy because there is a lot of pointer
            arithmetic in the typical C solutions and i need a managed solution.
            These are the reasons why I implemented the original published algorithm from the scratch and
            make it avaliable without the GNU license limitations.
            I do not need a high performance diff tool because it is used only sometimes.
            I will do some performace tweaking when needed.
            
            The algorithm itself is comparing 2 arrays of numbers so when comparing 2 text documents
            each line is converted into a (hash) number. See DiffText(). 
            
            Some chages to the original algorithm:
            The original algorithm was described using a recursive approach and comparing zero indexed arrays.
            Extracting sub-arrays and rejoining them is very performance and memory intensive so the same
            (readonly) data arrays are passed arround together with their lower and upper bounds.
            This circumstance makes the LCS and SMS functions more complicate.
            I added some code to the LCS function to get a fast response on sub-arrays that are identical,
            completely deleted or inserted.
            
            The result from a comparisation is stored in 2 arrays that flag for modified (deleted or inserted)
            lines in the 2 data arrays. These bits are then analysed to produce a array of Item objects.
            
            Further possible optimizations:
            (first rule: don't do it; second: don't do it yet)
            The arrays DataA and DataB are passed as parameters, but are never changed after the creation
            so they can be members of the class to avoid the paramter overhead.
            In SMS is a lot of boundary arithmetic in the for-D and for-k loops that can be done by increment
            and decrement of local variables.
            The DownVector and UpVector arrays are alywas created and destroyed each time the SMS gets called.
            It is possible to reuse tehm when transfering them to members of the class.
            See TODO: hints.
            </summary>
        </member>
        <member name="T:CANAPE.Utils.Diff.SMSRD">
            <summary>
            Shortest Middle Snake Return Data
            </summary>
        </member>
        <member name="M:CANAPE.Utils.Diff.DiffText(System.String,System.String)">
            <summary>
            Find the difference in 2 texts, comparing by textlines.
            </summary>
            <param name="TextA">A-version of the text (usualy the old one)</param>
            <param name="TextB">B-version of the text (usualy the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:CANAPE.Utils.Diff.DiffText(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Find the difference in 2 text documents, comparing by textlines.
            The algorithm itself is comparing 2 arrays of numbers so when comparing 2 text documents
            each line is converted into a (hash) number. This hash-value is computed by storing all
            textlines into a common hashtable so i can find dublicates in there, and generating a 
            new number each time a new textline is inserted.
            </summary>
            <param name="TextA">A-version of the text (usualy the old one)</param>
            <param name="TextB">B-version of the text (usualy the new one)</param>
            <param name="trimSpace">When set to true, all leading and trailing whitespace characters are stripped out before the comparation is done.</param>
            <param name="ignoreSpace">When set to true, all whitespace characters are converted to a single space character before the comparation is done.</param>
            <param name="ignoreCase">When set to true, all characters are converted to their lowercase equivivalence before the comparation is done.</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:CANAPE.Utils.Diff.Optimize``1(CANAPE.Utils.DiffData{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            If a sequence of modified lines starts with a line that contains the same content
            as the line that appends the changes, the difference sequence is modified so that the
            appended line and not the starting line is marked as modified.
            This leads to more readable diff sequences when comparing text files.
            </summary>
            <param name="Data">A Diff data buffer containing the identified changes.</param>
            <param name="comparer">Comparer for data lists</param>
        </member>
        <member name="M:CANAPE.Utils.Diff.DiffList``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Find the difference in 2 lists of types
            </summary>
            <param name="ArrayA">A-version of the numbers (usualy the old one)</param>
            <param name="ArrayB">B-version of the numbers (usualy the new one)</param>
            <param name="comparer">Comparer for data lists</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:CANAPE.Utils.Diff.DiffCodes(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This function converts all textlines of the text into unique numbers for every unique textline
            so further work can work only with simple numbers.
            </summary>
            <param name="aText">the input text</param>
            <param name="h">This extern initialized hashtable is used for storing all ever used textlines.</param>
            <param name="trimSpace">ignore leading and trailing space characters</param>
            <param name="ignoreCase">ignore case</param>
            <param name="ignoreSpace">ignore spaces</param>
            <returns>a array of integers.</returns>
        </member>
        <member name="M:CANAPE.Utils.Diff.SMS``1(CANAPE.Utils.DiffData{``0},System.Int32,System.Int32,CANAPE.Utils.DiffData{``0},System.Int32,System.Int32,System.Int32[],System.Int32[],System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            This is the algorithm to find the Shortest Middle Snake (SMS).
            </summary>
            <param name="DataA">sequence A</param>
            <param name="LowerA">lower bound of the actual range in DataA</param>
            <param name="UpperA">upper bound of the actual range in DataA (exclusive)</param>
            <param name="DataB">sequence B</param>
            <param name="LowerB">lower bound of the actual range in DataB</param>
            <param name="UpperB">upper bound of the actual range in DataB (exclusive)</param>
            <param name="DownVector">a vector for the (0,0) to (x,y) search. Passed as a parameter for speed reasons.</param>
            <param name="UpVector">a vector for the (u,v) to (N,M) search. Passed as a parameter for speed reasons.</param>
            <param name="comparer">Comparer for data lists</param>
            <returns>a MiddleSnakeData record containing x,y and u,v</returns>
        </member>
        <member name="M:CANAPE.Utils.Diff.LCS``1(CANAPE.Utils.DiffData{``0},System.Int32,System.Int32,CANAPE.Utils.DiffData{``0},System.Int32,System.Int32,System.Int32[],System.Int32[],System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            This is the divide-and-conquer implementation of the longes common-subsequence (LCS) 
            algorithm.
            The published algorithm passes recursively parts of the A and B sequences.
            To avoid copying these arrays the lower and upper bounds are passed while the sequences stay constant.
            </summary>
            <param name="DataA">sequence A</param>
            <param name="LowerA">lower bound of the actual range in DataA</param>
            <param name="UpperA">upper bound of the actual range in DataA (exclusive)</param>
            <param name="DataB">sequence B</param>
            <param name="LowerB">lower bound of the actual range in DataB</param>
            <param name="UpperB">upper bound of the actual range in DataB (exclusive)</param>
            <param name="DownVector">a vector for the (0,0) to (x,y) search. Passed as a parameter for speed reasons.</param>
            <param name="UpVector">a vector for the (u,v) to (N,M) search. Passed as a parameter for speed reasons.</param>
            <param name="comparer">Comparer for data lists</param>
        </member>
        <member name="M:CANAPE.Utils.Diff.CreateDiffs``1(CANAPE.Utils.DiffData{``0},CANAPE.Utils.DiffData{``0})">
            <summary>Scan the tables of which lines are inserted and deleted,
            producing an edit script in forward order.  
            </summary>
            dynamic array
        </member>
        <member name="T:CANAPE.Utils.DiffData`1">
            <summary>Data on one input file being compared.  
            </summary>
        </member>
        <member name="F:CANAPE.Utils.DiffData`1.Length">
            <summary>Number of elements (lines).</summary>
        </member>
        <member name="F:CANAPE.Utils.DiffData`1.data">
            <summary>Buffer of numbers that will be compared.</summary>
        </member>
        <member name="F:CANAPE.Utils.DiffData`1.modified">
            <summary>
            Array of booleans that flag for modified data.
            This is the result of the diff.
            This means deletedA in the first Data or inserted in the second Data.
            </summary>
        </member>
        <member name="M:CANAPE.Utils.DiffData`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initialize the Diff-Data buffer.
            </summary>
            <param name="initData">reference to the data</param>
        </member>
        <member name="T:CANAPE.Utils.DiffItem">
            <summary>details of one difference.</summary>
        </member>
        <member name="F:CANAPE.Utils.DiffItem.StartA">
            <summary>Start Line number in Data A.</summary>
        </member>
        <member name="F:CANAPE.Utils.DiffItem.StartB">
            <summary>Start Line number in Data B.</summary>
        </member>
        <member name="F:CANAPE.Utils.DiffItem.deletedA">
            <summary>Number of changes in Data A.</summary>
        </member>
        <member name="F:CANAPE.Utils.DiffItem.insertedB">
            <summary>Number of changes in Data B.</summary>
        </member>
        <member name="T:CANAPE.Utils.DynamicConfigObject">
            <summary>
            A read only configuration object backed by a dictionary
            </summary>
        </member>
        <member name="M:CANAPE.Utils.DynamicConfigObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CANAPE.Utils.DynamicConfigObject.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="dict">The dictionary of properties</param>
        </member>
        <member name="M:CANAPE.Utils.DynamicConfigObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Method to get a member value from dictionary
            </summary>
            <param name="binder">The binder</param>
            <param name="result">The result</param>
            <returns>True if got the member</returns>
        </member>
        <member name="T:CANAPE.Utils.GeneralUtils">
            <summary>
            Public static class containing some general helpful utility functions
            </summary>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.GenerateMd5String(System.Byte[])">
            <summary>
            Generate a MD5 hex string from a byte array
            </summary>
            <param name="data">The data to hash</param>
            <returns>The MD5 hex string</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.MakeByteString(System.Byte[])">
            <summary>
            Create a string from a byte array like python does
            </summary>
            <param name="data">The data to convert</param>
            <returns>The converted string, null if data was null</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.MakeByteArray(System.String)">
            <summary>
            Make a byte array from a string like python
            </summary>
            <param name="s">The string to convert (note any char values > 255 will be masked)</param>
            <returns>The byte array, null if s was null</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.ReadLine(System.IO.Stream)">
            <summary>
            Read a line of data from a stream, reads up to a NL
            </summary>
            <param name="stm">The stream to read from</param>
            <returns>The line</returns>
            <exception cref="T:System.IO.EndOfStreamException">Throw when no more data availeble</exception>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.EscapeString(System.String)">
            <summary>
            Create a printable escaped string, converts control characters to \xXX
            </summary>
            <param name="str">The string to escape</param>
            <returns>The escaped string</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.EscapeBytes(System.Byte[])">
            <summary>
            Create a printable escaped string, converts control characters to \xXX from a byte array
            </summary>
            <param name="bytes">The bytes to escape</param>
            <returns>The escaped string</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.SwapBytes(System.Byte[],System.Boolean)">
            <summary>
            Swap bytes if necessary to get the correct endian
            </summary>
            <param name="arr">The bytes to swap</param>
            <param name="littleEndian">True for little endian, false for big endian</param>
            <returns></returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.GlobToRegex(System.String)">
            <summary>
            Convert a basic Glob to a regular expression, ignoring case
            </summary>
            <param name="glob">The glob string</param>        
            <returns>The regular expression</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.GlobToRegex(System.String,System.Boolean)">
            <summary>
            Convert a basic Glob to a regular expression
            </summary>
            <param name="glob">The glob string</param>
            <param name="ignoreCase">Indicates that match should ignore case</param>
            <returns>The regular expression</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.ReadBytes(System.IO.Stream,System.Int32)">
            <summary>
            Read out a fixed number of bytes or throw and EndOfStreamException
            </summary>
            <param name="stm">The stream</param>
            <param name="totalLen">The length to read</param>
            <exception cref="T:System.IO.EndOfStreamException"></exception>
            <returns>A byte array containing the data</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.HexToBinary(System.String)">
            <summary>
            Convert hex data to binary
            </summary>
            <param name="hex">The hex string to convert</param>
            <returns>The byte array</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.HexToBinary(System.String,System.Boolean)">
            <summary>
            Convert hex data to binary
            </summary>
            <param name="hex">The hex string to convert</param>
            <param name="filter">Whether to filter out hyphens</param>
            <returns>The byte array</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.GetVersionString">
            <summary>
            Return a version string for the application.
            </summary>
            <returns>The version string</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.MakePrivateMetaName(System.Guid,System.String)">
            <summary>
            Make a meta name which is private to a UUID
            </summary>
            <param name="uuid">The UUID</param>
            <param name="name">The name</param>
            <returns>The private name</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.ToUnixTime(System.DateTime)">
            <summary>
            Converts a datetime to unix time
            </summary>
            <param name="time">The datetime structure</param>
            <exception cref="T:System.ArgumentException">If unix time would be invalid</exception>
            <returns>Unix time</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.FromUnixTime(System.Int32)">
            <summary>
            Converts a unix time to a datetime
            </summary>
            <param name="time">The number of seconds since 1/1/1970</param>
            <returns></returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.GetEncodingFromType(CANAPE.Utils.BinaryStringEncoding)">
            <summary>
            Converts encoding to an encoding object
            </summary>
            <param name="encoding">The encoding type</param>
            <returns>The encoding</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.MatchArray(System.Byte[],System.Int32,System.Byte[])">
            <summary>
            Match two byte arrays
            </summary>
            <param name="data">The data to match</param>
            <param name="pos">The position in the data array</param>
            <param name="match">The match array</param>
            <returns>True if all bytes match</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.IsHex(System.Char)">
            <summary>
            Determines if a character is a hex character
            </summary>
            <param name="c">The character to test</param>
            <returns>True if it is hex</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.SanitizeFilename(System.String,System.Char)">
            <summary>
            Method to sanitize a string to a valid filename
            </summary>
            <param name="name">The name to sanitize</param>
            <param name="replaceChar">The character to replace invalid characters with</param>
            <returns>The sanitized string</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.DecodeEscapedString(System.String)">
            <summary>
            Decode a C# style escaped string
            </summary>
            <param name="s">The string to decode</param>
            <returns>The decoded string</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.CompareBytes(System.Byte[],System.Byte[])">
            <summary>
            Compare two byte arrays
            </summary>
            <param name="x">Byte array x</param>
            <param name="y">Byte array y</param>
            <returns>True if they are equal</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.GetBytesHashCode(System.Byte[])">
            <summary>
            Get the hash code of a byte array
            </summary>
            <param name="ba">The array of bytes</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.WritePacketsToFile(System.String,System.Collections.Generic.IEnumerable{CANAPE.Utils.LogPacket})">
            <summary>
            Writes the packets to file.
            </summary>
            <param name="filename">The filename</param>
            <param name="packets">The packets</param>
        </member>
        <member name="M:CANAPE.Utils.GeneralUtils.ReadPacketsFromFile(System.String)">
            <summary>
            Reads the packets from file.
            </summary>
            <returns>The packets from file.</returns>
            <param name="filename">The filename</param>
        </member>
        <member name="T:CANAPE.Utils.IClone`1">
            <summary>
            Generic interface to implement a cloneable interface.
            </summary>
            <typeparam name="T">The type to clone to.</typeparam>
        </member>
        <member name="M:CANAPE.Utils.IClone`1.Clone">
            <summary>
            Clone the current object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:CANAPE.Utils.Int7V">
            <summary>
            Dummy structure to represent a 7bit integer
            </summary>
        </member>
        <member name="M:CANAPE.Utils.Int7V.#ctor(System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="value">The integer value</param>
        </member>
        <member name="M:CANAPE.Utils.Int7V.op_Explicit(CANAPE.Utils.Int7V)~System.Int32">
            <summary>
            Conversion operator to int
            </summary>
            <param name="right">The structure</param>
            <returns>The value</returns>
        </member>
        <member name="M:CANAPE.Utils.Int7V.op_Explicit(CANAPE.Utils.Int7V)~System.UInt32">
            <summary>
            Conversion operator to uint
            </summary>
            <param name="right">The structure</param>
            <returns>The value</returns>
        </member>
        <member name="M:CANAPE.Utils.Int7V.op_Explicit(CANAPE.Utils.Int7V)~System.Int64">
            <summary>
            Conversion operator to long
            </summary>
            <param name="right">The structure</param>
            <returns>The value</returns>
        </member>
        <member name="M:CANAPE.Utils.Int7V.op_Explicit(CANAPE.Utils.Int7V)~System.UInt64">
            <summary>
            Conversion operator to ulong
            </summary>
            <param name="right">The structure</param>
            <returns>The value</returns>
        </member>
        <member name="M:CANAPE.Utils.Int7V.op_Explicit(System.Int32)~CANAPE.Utils.Int7V">
            <summary>
            Conversion operator to Int7V
            </summary>
            <param name="right">The integer</param>
            <returns>The structure</returns>
        </member>
        <member name="M:CANAPE.Utils.Int7V.op_Explicit(System.UInt32)~CANAPE.Utils.Int7V">
            <summary>
            Conversion operator to Int7V
            </summary>
            <param name="right">The integer</param>
            <returns>The structure</returns>
        </member>
        <member name="M:CANAPE.Utils.Int7V.op_Explicit(System.Int64)~CANAPE.Utils.Int7V">
            <summary>
            Conversion operator to Int7V
            </summary>
            <param name="right">The long integer</param>
            <returns>The structure</returns>
        </member>
        <member name="M:CANAPE.Utils.Int7V.ToString">
            <summary>
            Convert to a string 
            </summary>
            <returns>The string</returns>
        </member>
        <member name="M:CANAPE.Utils.Int7V.ToString(System.String)">
            <summary>
            Convert to a string using a format
            </summary>
            <param name="s">The format string</param>
            <returns>The string</returns>
        </member>
        <member name="M:CANAPE.Utils.Int7V.ToString(System.IFormatProvider)">
            <summary>
            Convert to a string using a provider
            </summary>
            <param name="provider">The provider</param>
            <returns>The string</returns>
        </member>
        <member name="M:CANAPE.Utils.Int7V.ToString(System.String,System.IFormatProvider)">
            <summary>
            Convert to a string using a format and provider
            </summary>
            <param name="s">The format string</param>
            <param name="provider">The provider</param>
            <returns>The string</returns>
        </member>
        <member name="M:CANAPE.Utils.Int7V.Equals(System.Object)">
            <summary>
            Test for equality
            </summary>
            <param name="obj">The object to test</param>
            <returns>True if the object is equal</returns>
        </member>
        <member name="M:CANAPE.Utils.Int7V.op_Equality(CANAPE.Utils.Int7V,CANAPE.Utils.Int7V)">
            <summary>
            Equals operator
            </summary>
            <param name="left">Left hand object</param>
            <param name="right">Right hand object</param>
            <returns>True if object is equal</returns>
        </member>
        <member name="M:CANAPE.Utils.Int7V.op_Inequality(CANAPE.Utils.Int7V,CANAPE.Utils.Int7V)">
            <summary>
            Not equal operator
            </summary>
            <param name="left">Left hand object</param>
            <param name="right">Right hand object</param>
            <returns>True if object is not equal</returns>
        </member>
        <member name="M:CANAPE.Utils.Int7V.GetHashCode">
            <summary>
            Get hash code
            </summary>
            <returns>The hashcode</returns>
        </member>
        <member name="M:CANAPE.Utils.Int7V.CompareTo(System.Object)">
            <summary>
            Compare two objects
            </summary>
            <param name="obj">The object to compare against</param>
            <returns>less than 0 if less than, 0 if equal, greater if greater or null</returns>
            <exception cref="T:System.ArgumentException">Thrown if obj is not an Int7V</exception>
        </member>
        <member name="M:CANAPE.Utils.Int7V.CompareTo(CANAPE.Utils.Int7V)">
            <summary>
            Compare two objects
            </summary>
            <param name="other">The object to compare against</param>
            <returns>less than 0 if less than, 0 if equal, greater if greater</returns>
        </member>
        <member name="M:CANAPE.Utils.Int7V.Equals(CANAPE.Utils.Int7V)">
            <summary>
            Test for equality
            </summary>
            <param name="other">The other value</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:CANAPE.Utils.Int7V.ToWriter(CANAPE.Utils.DataWriter,System.Boolean)">
            <summary>
            Write the object to a stream
            </summary>
            <param name="writer">The writer to write the stream to</param>
            <param name="littleEndian">Whether the value should be little or big endian</param>
        </member>
        <member name="M:CANAPE.Utils.Int7V.FromReader(CANAPE.Utils.DataReader,System.Boolean)">
            <summary>
            Read the object from a stream
            </summary>
            <param name="reader">The reader</param>
            <param name="littleEndian">Whether the value shouldbe little or big endian</param>
        </member>
        <member name="P:CANAPE.Utils.Int7V.Value">
            <summary>
            Get or set the value
            </summary>
        </member>
        <member name="T:CANAPE.Utils.IPrimitiveValue">
            <summary>
            An interface which species a method to serialize a value to and from a byte stream
            </summary>
        </member>
        <member name="M:CANAPE.Utils.IPrimitiveValue.ToWriter(CANAPE.Utils.DataWriter,System.Boolean)">
            <summary>
            Write the object to a stream
            </summary>
            <param name="writer">The writer to write the stream to</param>
            <param name="littleEndian">Whether the value should be little or big endian</param>
        </member>
        <member name="M:CANAPE.Utils.IPrimitiveValue.FromReader(CANAPE.Utils.DataReader,System.Boolean)">
            <summary>
            Read the object from a stream
            </summary>
            <param name="reader">The reader</param>
            <param name="littleEndian">Whether the value shouldbe little or big endian</param>
        </member>
        <member name="P:CANAPE.Utils.IPrimitiveValue.Value">
            <summary>
            Get or set the value
            </summary>
        </member>
        <member name="T:CANAPE.Utils.LockedQueue`1">
            <summary>
            Generic queue which can be used in a multi-threaded app and waits for a queue value
            </summary>
            <typeparam name="T">Type of object to queue, must be a reference type</typeparam>
        </member>
        <member name="M:CANAPE.Utils.LockedQueue`1.#ctor(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Constructor
            </summary>
            <param name="limit">The bound of the queue, trying to add more than this number will block the queue</param>
            <param name="token">A cancellation token which can be used to cancel any pending operations</param>
        </member>
        <member name="M:CANAPE.Utils.LockedQueue`1.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>        
            <param name="limit">The bound of the queue, trying to add more than this number will block the queue</param>
        </member>
        <member name="M:CANAPE.Utils.LockedQueue`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CANAPE.Utils.LockedQueue`1.Enqueue(`0,System.Int32)">
            <summary>
            Enqueue a new item (thread safe)
            </summary>
            <param name="item">The item to queue</param>
            <param name="milliSecondsTimeout">Timeout to wait for enqueue, only an issue if using a limited queue</param>
            <returns>Returns true if successfully queued</returns>
            <exception cref="T:System.InvalidOperationException">The timeout value is invalid</exception>
            <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled</exception>
        </member>
        <member name="M:CANAPE.Utils.LockedQueue`1.Enqueue(`0)">
            <summary>
            Enqueue a new item (thread safe)
            </summary>
            <param name="item">The item to queue</param>      
            <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled</exception>
        </member>
        <member name="M:CANAPE.Utils.LockedQueue`1.Dequeue(System.Int32,`0@)">
            <summary>
            Dequeue an item, waiting for a specified time
            </summary>
            <param name="milliSecondsTimeout">The timeout if required</param>
            <param name="ret">The location of the return parameters</param>
            <returns>True if an item was successfully read from the queue, false otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
            <exception cref="T:System.OperationCanceledException">The opertion was cancelled</exception>
        </member>
        <member name="M:CANAPE.Utils.LockedQueue`1.Dequeue">
            <summary>
            Dequeue an item, waiting for ever
            </summary>        
            <returns>The item (null will be returned if the queue has been stopped)</returns>
        </member>
        <member name="P:CANAPE.Utils.LockedQueue`1.Count">
            <summary>
            Gets the count of items in the queue
            </summary>
        </member>
        <member name="M:CANAPE.Utils.LockedQueue`1.Stop">
            <summary>
            Stop the queue and try and unlock all waiting threads
            </summary>
        </member>
        <member name="P:CANAPE.Utils.LockedQueue`1.IsStopped">
            <summary>
            Indicates whether this queue has been stopped and there is no more data
            left to read
            </summary>
        </member>
        <member name="M:CANAPE.Utils.LockedQueue`1.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:CANAPE.Utils.LockedQueue`1.System#IDisposable#Dispose">
            <summary>
            Implemetation of Dispose
            </summary>
        </member>
        <member name="M:CANAPE.Utils.LockedQueue`1.GetEnumerator">
            <summary>
            Get enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:CANAPE.Utils.LockedQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:CANAPE.Utils.Logger">
            <summary>
            Class to implement a simple logger
            </summary>
        </member>
        <member name="T:CANAPE.Utils.Logger.EventLogEntry">
            <summary>
            Event log entry instance
            </summary>
        </member>
        <member name="P:CANAPE.Utils.Logger.EventLogEntry.Timestamp">
            <summary>
            The time of the log entry
            </summary>
        </member>
        <member name="P:CANAPE.Utils.Logger.EventLogEntry.EntryType">
            <summary>
            The type of the log entry
            </summary>
        </member>
        <member name="P:CANAPE.Utils.Logger.EventLogEntry.Text">
            <summary>
            The associated text
            </summary>
        </member>
        <member name="P:CANAPE.Utils.Logger.EventLogEntry.ExceptionObject">
            <summary>
            An associated exception object if available
            </summary>
        </member>
        <member name="P:CANAPE.Utils.Logger.EventLogEntry.SourceName">
            <summary>
            An associated source name
            </summary>
        </member>
        <member name="P:CANAPE.Utils.Logger.EventLogEntry.SourceGuid">
            <summary>
            An associated source guid
            </summary>
        </member>
        <member name="M:CANAPE.Utils.Logger.EventLogEntry.#ctor(CANAPE.Utils.Logger.LogEntryType,System.String,System.Exception,System.String,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="entryType">The log entry type</param>
            <param name="text">The associated text</param>
            <param name="sourceGuid">The guid of the source</param>
            <param name="sourceName">The name of the sourec</param>
            <param name="ex">An associated exception object if available</param>
        </member>
        <member name="T:CANAPE.Utils.Logger.LogEntryAddedEventArgs">
            <summary>
            Log entry event args
            </summary>
        </member>
        <member name="P:CANAPE.Utils.Logger.LogEntryAddedEventArgs.LogEntry">
            <summary>
            The log entry
            </summary>
        </member>
        <member name="M:CANAPE.Utils.Logger.LogEntryAddedEventArgs.#ctor(CANAPE.Utils.Logger.LogEntryType,System.String,System.Exception,System.String,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="entryType">The log entry type</param>
            <param name="text">The associated text</param>
            <param name="sourceGuid">The guid of the source</param>
            <param name="sourceName">The name of the sourec</param>
            <param name="ex">An associated exception object if available</param>
        </member>
        <member name="T:CANAPE.Utils.Logger.LogEntryType">
            <summary>
            The log entry type
            </summary>
        </member>
        <member name="F:CANAPE.Utils.Logger.LogEntryType.Verbose">
            <summary>
            Log a verbose entry
            </summary>
        </member>
        <member name="F:CANAPE.Utils.Logger.LogEntryType.Info">
            <summary>
            Log an information entry
            </summary>
        </member>
        <member name="F:CANAPE.Utils.Logger.LogEntryType.Warning">
            <summary>
            Log a warning entry
            </summary>
        </member>
        <member name="F:CANAPE.Utils.Logger.LogEntryType.Error">
            <summary>
            Log an error entry
            </summary>
        </member>
        <member name="F:CANAPE.Utils.Logger.LogEntryType.All">
            <summary>
            All the levels
            </summary>
        </member>
        <member name="P:CANAPE.Utils.Logger.LogLevel">
            <summary>
            Specify the level of the logging
            </summary>
        </member>
        <member name="E:CANAPE.Utils.Logger.LogEntryAdded">
            <summary>
            Event when log entry received
            </summary>
        </member>
        <member name="M:CANAPE.Utils.Logger.Log(CANAPE.Utils.Logger.LogEntryType,System.String,System.Guid,System.String,System.Object[])">
            <summary>
            Log a formatted entry
            </summary>
            <param name="entryType">The type to log</param>
            <param name="sourceName">The name of the source of the log</param>
            <param name="sourceGuid">The guid of the source of the log</param>
            <param name="format">The format string</param>
            <param name="args">Format arguments</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.Log(CANAPE.Utils.Logger.LogEntryType,System.String,System.Object[])">
            <summary>
            Log a formatted entry 
            </summary>
            <param name="entryType">The type to log</param>
            <param name="format">Format string</param>
            <param name="args">The args</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.Log(CANAPE.Utils.Logger.LogEntryType,System.String,System.Guid,System.String)">
            <summary>
            Log with an entry and only text
            </summary>
            <param name="entryType">The type to log</param>
            <param name="sourceName">The name of the source of the log</param>
            <param name="sourceGuid">The guid of the source of the log</param>
            <param name="text">The text string</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.Log(CANAPE.Utils.Logger.LogEntryType,System.String)">
            <summary>
            Log with an entry and only text
            </summary>
            <param name="entryType">The type to log</param>
            <param name="text">The text to log</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.Log(CANAPE.Utils.Logger.LogEntryType,System.Object)">
            <summary>
            Log with an entry and an object
            </summary>
            <param name="entryType">The type to log</param>
            <param name="obj">The object to log</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.Log(CANAPE.Utils.Logger.LogEntryType,System.String,System.Guid,System.Object)">
            <summary>
            Log with an entry and an object
            </summary>
            <param name="entryType">The type to log</param>
            <param name="sourceName">The name of the source of the log</param>
            <param name="sourceGuid">The guid of the source of the log</param>
            <param name="obj">The object to log</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.LogVerbose(System.String,System.Object[])">
            <summary>
            Log verbose entry
            </summary>
            <param name="format">Format string</param>
            <param name="args">The args</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.LogVerbose(System.String)">
            <summary>
            Log verbose entry
            </summary>
            <param name="text">The text to log</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.LogVerbose(System.Object)">
            <summary>
            Log verbose entry
            </summary>
            <param name="obj">The obj to log</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.LogInfo(System.String,System.Object[])">
            <summary>
            Log info entry
            </summary>
            <param name="format">Format string</param>
            <param name="args">The args</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.LogInfo(System.String)">
            <summary>
            Log info entry
            </summary>
            <param name="text">The text to log</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.LogInfo(System.Object)">
            <summary>
            Log info entry
            </summary>
            <param name="obj">The object to log</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.LogWarning(System.String,System.Object[])">
            <summary>
            Log warning entry
            </summary>
            <param name="format">Format string</param>
            <param name="args">The args</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.LogWarning(System.String)">
            <summary>
            Log warning entry
            </summary>
            <param name="text">The text to log</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.LogWarning(System.Object)">
            <summary>
            Log warning entry
            </summary>
            <param name="obj">The object to log</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.LogError(System.String,System.Object[])">
            <summary>
            Log error entry
            </summary>
            <param name="format">Format string</param>
            <param name="args">The args</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.LogError(System.String)">
            <summary>
            Log error entry
            </summary>
            <param name="text">The text to log</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.LogError(System.Object)">
            <summary>
            Log error entry
            </summary>
            <param name="obj">The object to log</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.LogException(CANAPE.Utils.Logger.LogEntryType,System.Exception)">
            <summary>
            Log an exception
            </summary>
            <param name="type">Type of log entry</param>
            <param name="ex">The exception to log</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.LogException(CANAPE.Utils.Logger.LogEntryType,System.String,System.Guid,System.Exception)">
            <summary>
            Log an exception
            </summary>
            <param name="type">Type of log entry</param>
            <param name="sourceGuid">Guid of the source</param>
            <param name="sourceName">Name of the source</param>
            <param name="ex">The exception to log</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.LogException(System.Exception)">
            <summary>
            Log an exception as an error
            </summary>
            <param name="ex">The exception to log</param>
        </member>
        <member name="M:CANAPE.Utils.Logger.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:CANAPE.Utils.Logger.SystemLogger">
            <summary>
            Get a default logger which outputs to stdout
            </summary>
            <returns></returns>
        </member>
        <member name="M:CANAPE.Utils.Logger.ret_LogEntryAdded(System.Object,CANAPE.Utils.Logger.LogEntryAddedEventArgs)">
            <summary>
            Handler for system logger
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:CANAPE.Utils.LogPacket">
            <summary>
            A class to hold a single log entry
            </summary>
        </member>
        <member name="P:CANAPE.Utils.LogPacket.Timestamp">
            <summary>
            Capture timestamp
            </summary>
        </member>
        <member name="P:CANAPE.Utils.LogPacket.Tag">
            <summary>
            Data tag
            </summary>
        </member>
        <member name="P:CANAPE.Utils.LogPacket.Uuid">
            <summary>
            Uuid of the packet
            </summary>
        </member>
        <member name="P:CANAPE.Utils.LogPacket.NetId">
            <summary>
            Uuid of the original connection where this came from
            </summary>
        </member>
        <member name="P:CANAPE.Utils.LogPacket.Network">
            <summary>
            Network description
            </summary>
        </member>
        <member name="P:CANAPE.Utils.LogPacket.Frame">
            <summary>
            The captured frame
            </summary>
        </member>
        <member name="P:CANAPE.Utils.LogPacket.Color">
            <summary>
            The color to draw
            </summary>
        </member>
        <member name="P:CANAPE.Utils.LogPacket.Hash">
            <summary>
            Get the hash of the logged frame
            </summary>
        </member>
        <member name="P:CANAPE.Utils.LogPacket.Length">
            <summary>
            Get the length of the logged frame
            </summary>
        </member>
        <member name="M:CANAPE.Utils.LogPacket.ToString">
            <summary>
            Get a string version of the packet
            </summary>
            <returns></returns>
        </member>
        <member name="M:CANAPE.Utils.LogPacket.#ctor(System.String,System.Guid,System.Guid,System.String,CANAPE.DataFrames.DataFrame,CANAPE.Utils.ColorValue,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="tag"></param>
            <param name="netid"></param>
            <param name="uuid"></param>
            <param name="network"></param>
            <param name="frame"></param>
            <param name="color"></param>
            <param name="timestamp"></param>
        </member>
        <member name="M:CANAPE.Utils.LogPacket.#ctor(System.String,System.Guid,System.String,CANAPE.DataFrames.DataFrame,CANAPE.Utils.ColorValue)">
            <summary>
            Constructor
            </summary>
            <param name="tag"></param>
            <param name="netid"></param>
            <param name="network"></param>
            <param name="frame"></param>
            <param name="color"></param>
        </member>
        <member name="M:CANAPE.Utils.LogPacket.#ctor(CANAPE.Nodes.LogPacketEventArgs)">
            <summary>
            Constructor from an event object
            </summary>
            <param name="args">The event args</param>
        </member>
        <member name="M:CANAPE.Utils.LogPacket.Clone">
            <summary>
            Clone the entire log packet
            </summary>
            <returns>The cloned packet</returns>
        </member>
        <member name="T:CANAPE.Utils.PipelineStream">
            <summary>
            Class to implement a thread safe pipe byte stream
            inputs in blocks of bytes
            </summary>
        </member>
        <member name="M:CANAPE.Utils.PipelineStream.#ctor(System.Threading.CancellationToken)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CANAPE.Utils.PipelineStream.Enqueue(System.Byte[])">
            <summary>
            Enqueue an array of bytes onto the pipeline
            </summary>
            <param name="frame">Array of bytes to queue, 
            if null is passed this will cause the stream to end when all data has been read</param>
        </member>
        <member name="P:CANAPE.Utils.PipelineStream.Eof">
            <summary>
            Provide an indication if this stream has received an end of file
            </summary>
        </member>
        <member name="P:CANAPE.Utils.PipelineStream.ReadTimeout">
            <summary>
            Get or set stream timeout
            </summary>
        </member>
        <member name="P:CANAPE.Utils.PipelineStream.CanTimeout">
            <summary>
            Returns whether this stream can timeout
            </summary>
        </member>
        <member name="P:CANAPE.Utils.PipelineStream.CanRead">
            <summary>
            Whether the stream can be read (always true)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.PipelineStream.CanSeek">
            <summary>
            Whether the stream can be seeked (always false)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.PipelineStream.CanWrite">
            <summary>
            Whether the stream can be written (always false)
            </summary>
        </member>
        <member name="M:CANAPE.Utils.PipelineStream.Flush">
            <summary>
            Flush the stream (does nothing)
            </summary>
        </member>
        <member name="P:CANAPE.Utils.PipelineStream.Length">
            <summary>
            Get length of stream, always throws NotSupportedException
            </summary>
        </member>
        <member name="P:CANAPE.Utils.PipelineStream.Position">
            <summary>
            Get or set position in stream, always throws NotSupportedException
            </summary>
        </member>
        <member name="M:CANAPE.Utils.PipelineStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read data from pipe
            </summary>
            <param name="buffer">The array to put the data into</param>
            <param name="offset">The offset into the array</param>
            <param name="count">The number of bytes to read</param>
            <returns>The length successfully read, 0 on end of stream</returns>
        </member>
        <member name="M:CANAPE.Utils.PipelineStream.ReadByte">
            <summary>
            Read a byte
            </summary>
            <returns>The byte, -1 on end of stream</returns>
        </member>
        <member name="M:CANAPE.Utils.PipelineStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek (always throws NotSupportedException)
            </summary>
            <param name="offset">Offset</param>
            <param name="origin">Origin</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns>N/A</returns>
        </member>
        <member name="M:CANAPE.Utils.PipelineStream.SetLength(System.Int64)">
            <summary>
            Set the length of the stream (always throws NotSupportedException)
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:CANAPE.Utils.PipelineStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream (always throws NotSupportedException)
            </summary>
            <param name="buffer">Buffer</param>
            <param name="offset">Offset</param>
            <param name="count">Count</param>
        </member>
        <member name="M:CANAPE.Utils.PipelineStream.Dispose(System.Boolean)">
            <summary>
            Dispose method
            </summary>
            <param name="disposing">True is disposing, else finalizing</param>
        </member>
        <member name="T:CANAPE.Utils.PropertyBag">
            <summary>
            A class to maintain a set of read only properties
            </summary>
        </member>
        <member name="M:CANAPE.Utils.PropertyBag.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the bag</param>
        </member>
        <member name="M:CANAPE.Utils.PropertyBag.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:CANAPE.Utils.PropertyBag.Name">
            <summary>
            Get name of bag
            </summary>
        </member>
        <member name="P:CANAPE.Utils.PropertyBag.Values">
            <summary>
            Get values for bag
            </summary>
        </member>
        <member name="P:CANAPE.Utils.PropertyBag.Bags">
            <summary>
            Get sub-bags
            </summary>
        </member>
        <member name="M:CANAPE.Utils.PropertyBag.AddBag(System.String)">
            <summary>
            Add a new named bag, if already exists will return the current one
            </summary>
            <param name="name">The name of the bag</param>
            <returns>The new bag</returns>
        </member>
        <member name="M:CANAPE.Utils.PropertyBag.AddBag(CANAPE.Utils.PropertyBag)">
            <summary>
            Add an existing bag
            </summary>
            <param name="bag">The bag</param>
        </member>
        <member name="M:CANAPE.Utils.PropertyBag.RemoveBag(System.String)">
            <summary>
            Remove a bag
            </summary>
            <param name="name">The name of the bag</param>
        </member>
        <member name="M:CANAPE.Utils.PropertyBag.AddValue(System.String,System.Object)">
            <summary>
            Add a value
            </summary>
            <param name="name">The name of the value</param>
            <param name="value">The value </param>
        </member>
        <member name="M:CANAPE.Utils.PropertyBag.RemoveValue(System.String)">
            <summary>
            Remove a value
            </summary>
            <param name="name">The name of the value</param>
        </member>
        <member name="M:CANAPE.Utils.PropertyBag.ContainsValue(System.String)">
            <summary>
            Determine if the bag contains a named value
            </summary>
            <param name="name">The name</param>
            <returns>True if the value exists</returns>
        </member>
        <member name="M:CANAPE.Utils.PropertyBag.ContainsBag(System.String)">
            <summary>
            Determine if the bag contains a named bag
            </summary>
            <param name="name">The name</param>
            <returns>True if the bag exists</returns>
        </member>
        <member name="M:CANAPE.Utils.PropertyBag.GetRelativeBag(System.String)">
            <summary>
            Get a bag with a dotted name
            </summary>
            <param name="name">The name in dotted form, e.g. com.test first searchs for the com bag, then test bag</param>
            <returns>The bag, or null if not found</returns>
        </member>
        <member name="M:CANAPE.Utils.PropertyBag.GetRelativeValue(System.String)">
            <summary>
            Get a value with a dotted name
            </summary>
            <param name="name">The name in dotted form, e.g. com.test.MyValue first searchs for the com bag, then test bag, then MyValue</param>
            <returns>The value or null if not found</returns>
        </member>
        <member name="M:CANAPE.Utils.PropertyBag.Clear">
            <summary>
            Clear the entire bag
            </summary>
        </member>
        <member name="M:CANAPE.Utils.PropertyBag.System#IDisposable#Dispose">
            <summary>
            Dispose of the bag and call dispose on its contents
            </summary>
        </member>
        <member name="M:CANAPE.Utils.PropertyBag.GetEnumerator">
            <summary>
            Get an enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:CANAPE.Utils.PropertyBag.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            IEnumerable method
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:CANAPE.Utils.ServiceProvider">
            <summary>
            CANAPE IServiceProvider, used to access parts of the system in a decoupled way
            </summary>
        </member>
        <member name="M:CANAPE.Utils.ServiceProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:CANAPE.Utils.ServiceProvider.GlobalInstance">
            <summary>
            Get the current static provider instance
            </summary>
        </member>
        <member name="M:CANAPE.Utils.ServiceProvider.GetService``1">
            <summary>
            Get a service
            </summary>
            <typeparam name="T">The type of service to get</typeparam>
            <returns>The service or null if it doesn't exist</returns>
        </member>
        <member name="M:CANAPE.Utils.ServiceProvider.GetService(System.Type)">
            <summary>
            Get a service for a particular type
            </summary>
            <param name="serviceType">The type of service</param>
            <returns>The service object if found, otherwise false</returns>
        </member>
        <member name="M:CANAPE.Utils.ServiceProvider.RegisterService(System.Type,System.Object)">
            <summary>
            Register a new service
            </summary>
            <param name="serviceType">The service type</param>
            <param name="serviceObject">The object which implements this service</param>
        </member>
        <member name="M:CANAPE.Utils.ServiceProvider.UnregisterService(System.Type)">
            <summary>
            Unregister a service
            </summary>
            <param name="serviceType">The service type</param>
        </member>
        <member name="T:CANAPE.Utils.TextLineEnding">
            <summary>
            An enumeration to specify the type of line endings to use
            when reading a line of text
            </summary>
        </member>
        <member name="F:CANAPE.Utils.TextLineEnding.LineFeed">
            <summary>
            Split on line feeds
            </summary>
        </member>
        <member name="F:CANAPE.Utils.TextLineEnding.CarriageReturn">
            <summary>
            Split on carriage returns
            </summary>
        </member>
        <member name="F:CANAPE.Utils.TextLineEnding.CarriageReturnLineFeed">
            <summary>
            Split on carriage return line feed pairs
            </summary>
        </member>
        <member name="T:CANAPE.Utils.Int24">
            <summary>
            Dummy structure to represent a 24bit integer
            </summary>
        </member>
        <member name="M:CANAPE.Utils.Int24.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="value">The integer value</param>
        </member>
        <member name="M:CANAPE.Utils.Int24.op_Implicit(CANAPE.Utils.Int24)~System.Int32">
            <summary>
            Conversion operator to int
            </summary>
            <param name="right">The structure</param>
            <returns>The value</returns>
        </member>
        <member name="M:CANAPE.Utils.Int24.op_Implicit(CANAPE.Utils.Int24)~System.UInt32">
            <summary>
            Conversion operator to uint
            </summary>
            <param name="right">The structure</param>
            <returns>The value</returns>
        </member>
        <member name="M:CANAPE.Utils.Int24.op_Implicit(CANAPE.Utils.Int24)~System.Int64">
            <summary>
            Conversion operator to long
            </summary>
            <param name="right">The structure</param>
            <returns>The value</returns>
        </member>
        <member name="M:CANAPE.Utils.Int24.op_Implicit(CANAPE.Utils.Int24)~System.UInt64">
            <summary>
            Conversion operator to ulong
            </summary>
            <param name="right">The structure</param>
            <returns>The value</returns>
        </member>
        <member name="M:CANAPE.Utils.Int24.op_Explicit(System.Int32)~CANAPE.Utils.Int24">
            <summary>
            Conversion operator to Int24
            </summary>
            <param name="right">The integer</param>
            <returns>The structure</returns>
        </member>
        <member name="M:CANAPE.Utils.Int24.op_Explicit(System.UInt32)~CANAPE.Utils.Int24">
            <summary>
            Conversion operator to Int24
            </summary>
            <param name="right">The integer</param>
            <returns>The structure</returns>
        </member>
        <member name="M:CANAPE.Utils.Int24.op_Explicit(System.Int64)~CANAPE.Utils.Int24">
            <summary>
            Conversion operator to Int24
            </summary>
            <param name="right">The long integer</param>
            <returns>The structure</returns>
        </member>
        <member name="M:CANAPE.Utils.Int24.ToString">
            <summary>
            Convert to a string 
            </summary>
            <returns>The string</returns>
        </member>
        <member name="M:CANAPE.Utils.Int24.ToString(System.String)">
            <summary>
            Convert to a string using a format
            </summary>
            <param name="s">The format string</param>
            <returns>The string</returns>
        </member>
        <member name="M:CANAPE.Utils.Int24.ToString(System.IFormatProvider)">
            <summary>
            Convert to a string using a provider
            </summary>
            <param name="provider">The provider</param>
            <returns>The string</returns>
        </member>
        <member name="M:CANAPE.Utils.Int24.ToString(System.String,System.IFormatProvider)">
            <summary>
            Convert to a string using a format and provider
            </summary>
            <param name="s">The format string</param>
            <param name="provider">The provider</param>
            <returns>The string</returns>
        </member>
        <member name="M:CANAPE.Utils.Int24.Equals(System.Object)">
            <summary>
            Test for equality
            </summary>
            <param name="obj">The object to test</param>
            <returns>True if the object is equal</returns>
        </member>
        <member name="M:CANAPE.Utils.Int24.op_Equality(CANAPE.Utils.Int24,CANAPE.Utils.Int24)">
            <summary>
            Equals operator
            </summary>
            <param name="left">Left hand object</param>
            <param name="right">Right hand object</param>
            <returns>True if object is equal</returns>
        </member>
        <member name="M:CANAPE.Utils.Int24.op_Inequality(CANAPE.Utils.Int24,CANAPE.Utils.Int24)">
            <summary>
            Not equal operator
            </summary>
            <param name="left">Left hand object</param>
            <param name="right">Right hand object</param>
            <returns>True if object is not equal</returns>
        </member>
        <member name="M:CANAPE.Utils.Int24.GetHashCode">
            <summary>
            Get hash code
            </summary>
            <returns>The hashcode</returns>
        </member>
        <member name="M:CANAPE.Utils.Int24.CompareTo(System.Object)">
            <summary>
            Compare two objects
            </summary>
            <param name="obj">The object to compare against</param>
            <returns>less than 0 if less than, 0 if equal, greater if greater or null</returns>
            <exception cref="T:System.ArgumentException">Thrown if obj is not an Int24</exception>
        </member>
        <member name="M:CANAPE.Utils.Int24.CompareTo(CANAPE.Utils.Int24)">
            <summary>
            Compare two objects
            </summary>
            <param name="other">The object to compare against</param>
            <returns>less than 0 if less than, 0 if equal, greater if greater</returns>
        </member>
        <member name="M:CANAPE.Utils.Int24.Equals(CANAPE.Utils.Int24)">
            <summary>
            Test for equality
            </summary>
            <param name="other">The other value</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:CANAPE.Utils.Int24.ToWriter(CANAPE.Utils.DataWriter,System.Boolean)">
            <summary>
            Write the object to a stream
            </summary>
            <param name="writer">The writer to write the stream to</param>
            <param name="littleEndian">Whether the value should be little or big endian</param>
        </member>
        <member name="M:CANAPE.Utils.Int24.FromReader(CANAPE.Utils.DataReader,System.Boolean)">
            <summary>
            Read the object from a stream
            </summary>
            <param name="reader">The reader</param>
            <param name="littleEndian">Whether the value shouldbe little or big endian</param>
        </member>
        <member name="P:CANAPE.Utils.Int24.Value">
            <summary>
            Get or set the value
            </summary>
        </member>
        <member name="T:CANAPE.Utils.UInt24">
            <summary>
            Dummy structure to represent a 24bit unsigned integer
            </summary>
        </member>
        <member name="M:CANAPE.Utils.UInt24.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="value">The integer value</param>
        </member>
        <member name="M:CANAPE.Utils.UInt24.op_Implicit(CANAPE.Utils.UInt24)~System.UInt32">
            <summary>
            Conversion operator to uint
            </summary>
            <param name="right">The structure</param>
            <returns>The value</returns>
        </member>
        <member name="M:CANAPE.Utils.UInt24.op_Implicit(CANAPE.Utils.UInt24)~System.Int32">
            <summary>
            Conversion operator to uint
            </summary>
            <param name="right">The structure</param>
            <returns>The value</returns>
        </member>
        <member name="M:CANAPE.Utils.UInt24.op_Implicit(CANAPE.Utils.UInt24)~System.Int64">
            <summary>
            Conversion operator to long
            </summary>
            <param name="right">The structure</param>
            <returns>The value</returns>
        </member>
        <member name="M:CANAPE.Utils.UInt24.op_Implicit(CANAPE.Utils.UInt24)~System.UInt64">
            <summary>
            Conversion operator to ulong
            </summary>
            <param name="right">The structure</param>
            <returns>The value</returns>
        </member>
        <member name="M:CANAPE.Utils.UInt24.op_Explicit(System.UInt32)~CANAPE.Utils.UInt24">
            <summary>
            Conversion operator to UInt24
            </summary>
            <param name="right">The integer</param>
            <returns>The structure</returns>
        </member>
        <member name="M:CANAPE.Utils.UInt24.op_Explicit(System.Int32)~CANAPE.Utils.UInt24">
            <summary>
            Conversion operator to UInt24
            </summary>
            <param name="right">The integer</param>
            <returns>The structure</returns>
        </member>
        <member name="M:CANAPE.Utils.UInt24.op_Explicit(System.Int64)~CANAPE.Utils.UInt24">
            <summary>
            Conversion operator to UInt24
            </summary>
            <param name="right">The integer</param>
            <returns>The structure</returns>
        </member>
        <member name="M:CANAPE.Utils.UInt24.ToString">
            <summary>
            Convert to a string 
            </summary>
            <returns>The string</returns>
        </member>
        <member name="M:CANAPE.Utils.UInt24.ToString(System.String)">
            <summary>
            Convert to a string using a format
            </summary>
            <param name="s">The format string</param>
            <returns>The string</returns>
        </member>
        <member name="M:CANAPE.Utils.UInt24.ToString(System.IFormatProvider)">
            <summary>
            Convert to a string using a provider
            </summary>
            <param name="provider">The provider</param>
            <returns>The string</returns>
        </member>
        <member name="M:CANAPE.Utils.UInt24.ToString(System.String,System.IFormatProvider)">
            <summary>
            Convert to a string using a format and provider
            </summary>
            <param name="s">The format string</param>
            <param name="provider">The provider</param>
            <returns>The string</returns>
        </member>
        <member name="M:CANAPE.Utils.UInt24.Equals(System.Object)">
            <summary>
            Test for equality
            </summary>
            <param name="obj">The object to test</param>
            <returns>True if the object is equal</returns>
        </member>
        <member name="M:CANAPE.Utils.UInt24.op_Equality(CANAPE.Utils.UInt24,CANAPE.Utils.UInt24)">
            <summary>
            Equals operator
            </summary>
            <param name="left">Left hand object</param>
            <param name="right">Right hand object</param>
            <returns>True if object is equal</returns>
        </member>
        <member name="M:CANAPE.Utils.UInt24.op_Inequality(CANAPE.Utils.UInt24,CANAPE.Utils.UInt24)">
            <summary>
            Not equal operator
            </summary>
            <param name="left">Left hand object</param>
            <param name="right">Right hand object</param>
            <returns>True if object is not equal</returns>
        </member>
        <member name="M:CANAPE.Utils.UInt24.GetHashCode">
            <summary>
            Get hash code
            </summary>
            <returns>The hashcode</returns>
        </member>
        <member name="M:CANAPE.Utils.UInt24.CompareTo(System.Object)">
            <summary>
            Compare two objects
            </summary>
            <param name="obj">The object to compare against</param>
            <returns>less than 0 if less than, 0 if equal, greater if greater or null</returns>
            <exception cref="T:System.ArgumentException">Thrown if obj is not a UInt24</exception>
        </member>
        <member name="M:CANAPE.Utils.UInt24.CompareTo(CANAPE.Utils.UInt24)">
            <summary>
            Compare two objects
            </summary>
            <param name="other">The object to compare against</param>
            <returns>less than 0 if less than, 0 if equal, greater if greater</returns>
        </member>
        <member name="M:CANAPE.Utils.UInt24.Equals(CANAPE.Utils.UInt24)">
            <summary>
            Test for equality
            </summary>
            <param name="other">The other value</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:CANAPE.Utils.UInt24.ToWriter(CANAPE.Utils.DataWriter,System.Boolean)">
            <summary>
            Write the object to a stream
            </summary>
            <param name="writer">The writer to write the stream to</param>
            <param name="littleEndian">Whether the value should be little or big endian</param>
        </member>
        <member name="M:CANAPE.Utils.UInt24.FromReader(CANAPE.Utils.DataReader,System.Boolean)">
            <summary>
            Read the object from a stream
            </summary>
            <param name="reader">The reader</param>
            <param name="littleEndian">Whether the value shouldbe little or big endian</param>
        </member>
        <member name="P:CANAPE.Utils.UInt24.Value">
            <summary>
            Get or set the value
            </summary>
        </member>
    </members>
</doc>
